[{"path":"index.html","id":"the-scan-book","chapter":"The Scan-Book","heading":"The Scan-Book","text":"Version 22.09 (build 2) Note: cover designed Tony Wilbert Henry Ritter.\nThanx !","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Hello!glad found way book tells beginning use scan package. scan quiet thoroughly developed, book early stage (40% done). continuously working extending . point time release book available. draft full errors (code typos).\nsuggestions enhance book like report errors, comments, feedback etc. can posting issue gitHub repository book. can find repository https://github.com/jazznbass/scan-Book.Thank !Jürgen30 August 2022","code":""},{"path":"preface.html","id":"software-reference","chapter":"Preface","heading":"Software reference","text":"book created using Rmarkdown (Allaire et al., 2022) bookdown (Xie, 2022) packages within RStudio (RStudio Team, 2018) environment. analyses conducted R package scan version 0.55 (Wilbert & Lueke, 2022). R version 4.2.1 (2022-06-23) used (R Core Team, 2022).","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"Single case research become important broadly accepted method gaining insight educational processes. Especially field special education adopted single-case research proper method evaluating effectiveness intervention developmental processes underlying problems acquiring academic skills. Single-case studies also popular among teachers educators interested evaluating learning progress students. resulting information single-case research design provide helpful information pedagogical decision processes regarding teaching processes individual student also help decide, whether implement certain teaching methods classroom.\nDespite usefulness, standards conduct single-case studies, analyze data, present results less well developed compared group based research designs. Moreover, ample software helping analyse data, software designed towards analyzing group based data sets. Visualizing single-case data sets oftentimes means tinker spreadsheet programs analyzing becomes cumbersome endeavor. book addresses gap. written around specialized software tool managing, visualizing, analyzing single-case data. tool extension package software R (R Core Team, 2022) named scan, acronym single-case analyses.","code":""},{"path":"introduction.html","id":"a-teaser","chapter":"1 Introduction","heading":"1.1 A teaser","text":"go details scan exactly works, like provide example can scan. meant teaser get motivated tackle steep learning curve associated use R (land milk honey behind curve!). , mind understand every detail example, explained obvious get familiar scan.Let us set fictional context. Let us assume researching method foster calculation abilities struggling fourth grade students. developed intervention program named KUNO. pilot study like get evidence effectiveness new method set multi-baseline single-case study comprising three students take part KUNO program across period ten weeks. Throughout course regularly measured calculation abilities student 20 times reliable test. also implemented follow eight weeks additional five measures. calculation test gives number correctly solved calculation tasks within ten minutes.\nNow, invent data fictitious KUNO study laborious conduct real study actually evolve real intervention method.\nuse scan package code data. case consists 25 measurements. three phases: pre intervention (), intervention (B), follow-(C). Phases B different lengths. cases named combined single object called strange_study.Now visualize cases:Now need descriptive statistics:\nTable 1.1: Descriptive statistics\nSingle-case data oftentimes analyzed overlap indices. Let us get overview comparing phases B:\nTable 1.2: Overlap indices. Comparing phase 1 phase 2\nchanges hold follow-? Let us compare phases C:\nTable 1.3: Overlap indices. Comparing phase phase C\nFinally, conduct regression analyses cases piecewise regression model:\nTable 1.4: Piecewise-regression model predicting variable ‘values’\n\nTable 1.4: Piecewise-regression model predicting variable ‘values’\n\nTable 1.4: Piecewise-regression model predicting variable ‘values’\n","code":"\ncase1 <- scdf(\n  c(A = 3, 2, 4, 6, 4, 3, \n    B = 6, 5, 4, 6, 7, 5, 6, 8, 6, 7, 8, 9, 7, 8, \n    C = 6, 6, 8, 5, 7), \n  name = \"Dustin\"\n)\ncase2 <- scdf(\n  c(A = 0, 1, 3, 1, 4, 2, 1, \n    B = 2, 1, 4, 3, 5, 5, 7, 6, 3, 8, 6, 4, 7, \n    C = 6, 5, 6, 8, 6), \n  name = \"Mike\"\n)\ncase3 <- scdf(\n  c(A = 7, 5, 6, 4, 4, 7, 5, 7, 4,\n    B = 8, 9, 11, 13, 12, 15, 16, 13, 17, 16, 18,\n    C = 17, 20, 22, 18, 20), \n  name = \"Will\"\n)\nstrange_study <- c(case1, case2, case3)\nplot(\n  strange_study,\n  ylab = \"Correct\",\n  xlab = \"Days\",\n  lines = c(\"loreg\", col = \"red\"),\n  phase.names = c(\"Baseline\", \"Intervention\", \"Follow-up\"),\n  style = \"chart\",\n  ylim = c(0, 30),\n  xinc = 2\n)\ndescribe(strange_study)\noverlap(strange_study)\noverlap(strange_study, phases = c(\"A\", \"C\"))\nplm(strange_study$Dustin)\nplm(strange_study$Mike)\nplm(strange_study$Will)"},{"path":"some-things-about-r.html","id":"some-things-about-r","chapter":"2 Some things about R","heading":"2 Some things about R","text":"chapter get brief introduction R. familiar R might like go directly next chapter.\nR programming language optimized statistical purposes. created 1992 Ross Ihaka Robert Gentleman University Auckland. Since developed continuously became one leading statistical software programs. R unmatched versatility. used teaching introductory courses statistics sophisticated mathematical analysis. become defacto standard many scientific disciplines natural social sciences.\nR completely community driven . , developed extended anybody likes participate . comes costs can downloaded free major many minor platforms www.r-project.org. Yet, reliable proprietary software like Mplus, STATA, SPSS etc . can tell writing hard become R-fan statistics :-)\nR can used least two ways:can use applying data analyses. way functions like statistical programs. learn specific syntax R compute data analysis need. example mean(x) return mean variable x; lm(y ~ x) calculate linear regression criteria y predictor x plot(x, y) return scatter-plot variables x y.can use R program new statistical procedures, extend previous ones.second function origin R’s huge success versatility. New statistical procedures functions can published used everyone called packages. package usually contains several functions, help files example data-sets. Hundreds packages available help kinds specialized analyses. basic installation R comes large variety packages per installed. New packages can times easily installed within R. Admittedly, must latest developmental version new package installation sometimes can get bit complex. bit help persistence difficult accomplish.book hand describes use additional package named scan providing specialized functions single-case analyses. scan comes two versions: “stable” version developmental version. versions can installed directly within R. stable version much older provides limited functionality. Therefore, refer developmental version book.","code":""},{"path":"some-things-about-r.html","id":"basic-r","chapter":"2 Some things about R","heading":"2.1 Basic R","text":"R script language. , type text let R execute commands wrote . Either work console textfile. console command executed every time press RETURN-key. textfile type code, mark part like executed, run code (click certain key). latter text files can saved reused later R sessions. Therefore, usually work text file.value assigned variable <- operator. read arrow rather less sign minus sign. # followed comment make code understandable. , follows # interpreted R. vector chain several values. vector describe values measurement series. c function used build vector (e.g., c(1, 2, 3, 4)). like see content variable use print function. print(x) display content variable x. shortcut just type variable name (press return) x.Two important concepts R functions arguments. function name procedure something arguments provided . example, function mean calculated mean. mean argument x “expects” provide vector (series values) calculate mean. mean( x = c(1, 3, 5) ) compute mean values 1, 3, 5 return result 3. functions can take several arguments. mean example also takes argument trim. calculating trimmed mean. mean( x = c(1, 1, 3, 3, 5, 6, 7, 8, 9, 9), trim = 0.1) calculate 10% trimmed mean provided values. name first argument dropped. , mean( c(1, 3, 5) ) interpreted R mean( x = c(1, 3, 5) ). also provide variable argument.return value function can assigned new variable instead:Every function R help page written programmers. can retrieve pages help function short cut ?. help(\"mean\") display help page mean function. quotation marks necessary provide variable name mean word ‘mean’. shortcut works ?mean. bit confusingly, need quotation marks .","code":"\n# x is assigned the value 10:\nx <- 10\n\n# See what's inside of x:\nx[1] 10\n# x is assigned a vector with three values:\nx <- c(10, 11, 15)\n\n# ... and display the content of x:\nx[1] 10 11 15\nvalues <- c(1, 4, 5, 6, 3, 7, 7, 5)\nmean(x = values)[1] 4.75\n# or shorter:\nmean(values)[1] 4.75\ny <- c(1, 4, 5, 6, 3, 7, 7, 5)\nres <- mean(y)\n#now res contains the mean of y:\nres[1] 4.75"},{"path":"the-scan-package.html","id":"the-scan-package","chapter":"3 The scan package","heading":"3 The scan package","text":"","code":""},{"path":"the-scan-package.html","id":"installing-the-scan-package","chapter":"3 The scan package","heading":"3.1 Installing the scan package","text":"can use install.packages function install scan.install.packages(\"scan\") install stable version.current stable release version 0.55. Please look Section Software reference version scan used creating book make sure version newer one installed.R contains many packages significantly slow packages loaded computer memory beginning R session. Therefore, installing scan needs activated beginning session use R. Usually session starts start R program ends closing R.activating package need library function. case library(scan). get something likeindicating everything went smoothly scan ready job.","code":"scan 0.55 (2022-08-29)\nSingle-Case Data Analysis for Single and Multiple Baseline Designs"},{"path":"the-scan-package.html","id":"development-version-of-scan","chapter":"3 The scan package","heading":"3.2 Development version of scan","text":"Alternatively, can compile development version scan . might necessary stable version bugs missing functions fixed.may need computer expertise get development version running. hosted gitHub <https://github.com/jazznbass/scan>.installation, can apply install_github function devtools package (make sure installed devtools package ):devtools::install_github(\"jazznbass/scan\", dependencies = TRUE)running Windows operating system probably install Rtools . Rtools contains additional programs (e.g. compilers) needed compile R source packages.can find Rtools : <https://cran.r-project.org/bin/windows/Rtools/>","code":""},{"path":"the-scan-package.html","id":"reporting-issues-with-scan-and-suggesting-enhancements","chapter":"3 The scan package","heading":"3.3 Reporting issues with scan and suggesting enhancements","text":"scan gitHub repository <https://github.com/jazznbass/scan> ideal place report bugs, problems, ideas enhancing scan. Please use issue tool (direct link: <https://github.com/jazznbass/scan/issues>).thankful feedback, corrections, whatever helps improve scan!","code":""},{"path":"the-scan-package.html","id":"functions-overview","chapter":"3 The scan package","heading":"3.4 Functions overview","text":"functions scan package can divided following categories:Manage data, analyze, manipulate, simulate, depict.Table ?? gives overview functions. Furthermore, can see current life cycle stage function. life cycle stage categorization based tidyverse package described detail https://lifecycle.r-lib.org/articles/stages.html.","code":""},{"path":"the-scan-package.html","id":"management","chapter":"3 The scan package","heading":"3.4.1 Management","text":"\nTable 3.1: Functions data management.\n","code":""},{"path":"the-scan-package.html","id":"depiction","chapter":"3 The scan package","heading":"3.4.2 Depiction","text":"\nTable 3.2: Functions data depiction/visualisation.\n","code":""},{"path":"the-scan-package.html","id":"analysis","chapter":"3 The scan package","heading":"3.4.3 Analysis","text":"\nTable 3.3: Functions data analysis.\n","code":""},{"path":"the-scan-package.html","id":"manipulation","chapter":"3 The scan package","heading":"3.4.4 Manipulation","text":"\nTable 3.4: Functions data manipulation.\n","code":""},{"path":"the-scan-package.html","id":"simulation","chapter":"3 The scan package","heading":"3.4.5 Simulation","text":"\nTable 3.5: Functions data simulation.\n","code":""},{"path":"managing-single-case-data.html","id":"managing-single-case-data","chapter":"4 Managing single-case data","heading":"4 Managing single-case data","text":"","code":""},{"path":"managing-single-case-data.html","id":"a-single-case-data-frame","chapter":"4 Managing single-case data","heading":"4.1 A single-case data frame","text":"Scan provides data-class encoding single-case data: single-case data frame (short scdf). scdf object contains one multiple single-case data sets optimized managing displaying data. Think scdf file including separate datasheet single case. datasheet made least three variables: measured values, phase identifier measured value, measurement time (mt) measure. Optionally, scdfs include variables single-case (e.g., control variables), also name case.\nTechnically, scdf object list containing data frames. \nclass c(“scdf”,“list”). Additionally, \nscdf entails attribute scdf list \nattributes. var.values, var.phase, \nvar.mt contain names values,\nphase, measurement time variable. \ndefault, names set values, phase,\nmt.\nSeveral functions available creating, transforming, merging, importing/exporting scdfs.","code":""},{"path":"managing-single-case-data.html","id":"scdf","chapter":"4 Managing single-case data","heading":"4.2 Creating scdfs","text":"scdf function basic tool creating single-case data frame. Basically, provide measurement values phase structure scdf object build. three different ways defining phase structure. First, defining beginning B-phase B_start argument, second, defining design phase_design argument third, setting parameters named vector dependent variable.B_start argument applicable single-case consists single -phase followed B-phase. remnant time scan handle sign-case designs two phases. number assigned B_start indicates measurement-time defined mt argument. , assume vector measurement times mt = c(1,3,7,10,15,17,18,20) B_start = 15 first measurement B-phase start fifth measurement mt = 15.\nphase_design argument named vector name length phase. phase names can set arbitrary, although recommend use capital letters (, B, C, …) phase followed , indicated, number phases repeat (A1, B1, A2, B2, …). Although possible give name one phase (, B, , B) might lead confusion errors coding analyzes scan.\nvector dependent variable includes named values, phase_design structure created automatically. named value sets beginning new phase. example c(= 3,2,4, B = 5,4,3, C = 6,7,6,5) create ABC-phase design 3, 3, 4 values per phase.\nUse one three methods time recommend use phase_design argument named vector method versatile.\nmeasurement times given, scdf automatically adds numbered sequentially 1, 2, 3, …, N N number measurements. circumstances might useful define individual measurement times measurement. example, want include days since beginning study time intervals measurements widely varying might get valid results way analyzing data regression approach.Missing values coded using NA (available).variables implemented adding new variable names vector containing values. Please aware new variable must never name one arguments function (.e. B_start, phase_design, name, dvar, pvar, mvar).Table 4.1 shows complete list arguments passed function.\nTable 4.1: Arguments scdf function\nwant create data-set comprising several single-cases easiest way first create scdf case join new scdf c command:like use default variable names (“values”, “phase”, “mt”) define dvar (dependent variable), pvar (variable indicating phase), mvar (measurement-time variable) arguments.","code":"\n### Three ways to code the same scdf\nscdf(values = c(A = 2,2,4,5, B = 8,7,6,9,8,7))\nscdf(values = c(2,2,4,5,8,7,6,9,8,7), B_start = 5)\nscdf(values = c(2,2,4,5,8,7,6,9,8,7), phase_design = c(A = 4, B = 6))\n# example of a more complex design \nscdf(\n  values = c(2,2,4,5, 8,7,6,9,8,7, 12,11,13), \n  mt = c(1,2,3,6, 8,9,11,12,16,18, 27,28,29),\n  phase_design = c(A = 4, B = 6, C = 3)\n)#A single-case data frame with one case\n\n Case1: values mt phase\n             2  1     A\n             2  2     A\n             4  3     A\n             5  6     A\n             8  8     B\n             7  9     B\n             6 11     B\n             9 12     B\n             8 16     B\n             7 18     B\n            12 27     C\n            11 28     C\n            13 29     C\nscdf(values = c(A = 2,2,NA,5, B = 8,7,6,9,NA,7))\nscdf(\n  values = c(A = 2,2,3,5, B = 8,7,6,9,7,7), \n  teacher = c(0,0,1,1,0,1,1,1,0,1), \n  hour = c(2,3,4,3,3,1,6,5,2,2)\n)#A single-case data frame with one case\n\n Case1: values teacher hour mt phase\n             2       0    2  1     A\n             2       0    3  2     A\n             3       1    4  3     A\n             5       1    3  4     A\n             8       0    3  5     B\n             7       1    1  6     B\n             6       1    6  7     B\n             9       1    5  8     B\n             7       0    2  9     B\n             7       1    2 10     B\ncase1 <- scdf(\n  values = c(A = 5, 7, 10, 5, 12, B = 7, 10, 18, 15, 14, 19), \n  name = \"Charlotte\"\n)\ncase2 <- scdf(\n  values = c(A = 3, 4, 3, 5, B = 7, 4, 7, 9, 8, 10, 12), \n  name = \"Theresa\"\n)\ncase3 <- scdf(\n  values = c(A = 9, 8, 8, 7, 5, 7, B = 6, 14, 15, 12, 16), \n  name = \"Antonia\"\n)\nmbd <- c(case1, case2, case3)\n# Example: Using a different name for the dependent variable\ncase <- scdf(\n  score = c(A = 5, 7, 10, 5, 12, B = 7, 10, 18, 15, 14, 19), \n  dvar = \"score\"\n)\n\n# Example: Using new names for the dependent and the phase variables\ncase <- scdf(\n  score = c(A = 3, 4, 3, 5, B = 7, 4, 7, 9, 8, 10, 12), \n  dvar = \"score\", pvar = \"section\"\n)\n\n# Example: Using new names for dependent, phase, and measurement-time variables\ncase <- scdf(\n  score = c(A = 9, 8, 8, 7, 5, 7, B = 6, 14, 15, 12, 16), \n  name = \"Antonia\", dvar = \"score\", pvar = \"section\", mvar = \"day\"\n)\n\nsummary(case)#A single-case data frame with one case\n\n         Measurements Design\n Antonia           11    A-B\n\nVariable names:\nscore <dependent variable>\nday <measurement-time variable>\nsection <phase variable>"},{"path":"managing-single-case-data.html","id":"saving-and-reading-single-case-data-frames","chapter":"4 Managing single-case data","heading":"4.3 Saving and reading single-case data frames","text":"Usually, needed save scdf separate file computer. cases keep coding scdf described rerun every time working data. sometimes convenient separately save data file later use send colleague.\nsimplest way use base R functions saveRDS readRDS purpose. saveRDS takes least two arguments: first object like save second file name resulting file. scdf name study1 line saveRDS(study1, \"study1.rds\") save scdf drive. later read file study1 <- readRDS(\"study1.rds\"). getwd() return current active folder working .","code":""},{"path":"managing-single-case-data.html","id":"import-and-export-single-case-data-frames","chapter":"4 Managing single-case data","heading":"4.4 Import and export single-case data frames","text":"","code":""},{"path":"managing-single-case-data.html","id":"read-scdf","chapter":"4 Managing single-case data","heading":"4.4.1 Import data","text":"working programs besides R need export import scdf common file format. read_scdf imports comma-separated-variable (csv) file converts scdf object. default, csv-file contain columns case, phase, values. Optionally, column named mt provided. csv file build like :format single-case file spreadsheet program importing scanIn case variables names differ standard (.e. “case”, “values”, “phase”, “mt” ), set additional arguments fit file. read_scdf(\"example.csv\", cvar = \"name\", dvar = \"wellbeing\", pvar = \"intervention\", mvar = \"time\") example set variables attributes resulting scdf. Cases split variable \"name\", \"wellbeing\" set dependent variable (default values), phase information variable \"intervention\", measurement times variable \"time\". also reassign phase names within phase variable setting argument phase.names. Assume example file contains values 0 1 identify two phases recommend set “” “B” read_scdf(\"example.csv\", phase.names = c(\"\", \"B\")).reasons, computer systems German () language setups export csv-files default comma decimal point semicolon separator values. cases set two extra arguments import data:read_scdf(\"example.csv\", dec = \",\", sep = \";\")read_scdf also allows directly importing Microsoft Excel .xlsx .xls files. need library readxl installed R setup work. Excel files automatically detected filename extension xlsor xlsx explicitly setting type argument (e.g. type = \"xlsx\").","code":"\ndat <- read_scdf(\n  \"example2.xlsx\", cvar = \"name\", pvar = \"intervention\", \n  dvar = \"wellbeing\", mvar = \"time\", phase.names = c(\"A\",\"B\")\n)Loaded 20 cases.\nsummary(dat)#A single-case data frame with 20 cases\n\n          Measurements Design\n Charles            20    A-B\n Kolten             20    A-B\n Annika             20    A-B\n Kaysen             20    A-B\n Urijah             20    A-B\n Leila              20    A-B\n Leia               20    A-B\n Aleigha            20    A-B\n Greta              20    A-B\n Alijah             20    A-B\n Ricardo            20    A-B\n Dallas             20    A-B\n Edith              20    A-B\n Braylee            20    A-B\n Giovanni           20    A-B\n Ismael             20    A-B\n Grady              20    A-B\n Raina              20    A-B\n Cambria            20    A-B\n Lincoln            20    A-B\n\nVariable names:\nintervention <phase variable>\nwellbeing <dependent variable>\ntime <measurement-time variable>\nage\ngender\ngym"},{"path":"managing-single-case-data.html","id":"write-scdf","chapter":"4 Managing single-case data","heading":"4.4.2 Export data","text":"write_scdf() exports scdf object comma-separated-variables file (csv) can imported software data analyses (MS OFFICE, Libre Office etc.). scdf object converted single data frame case variable identifying rows subject. first argument command identifies scdf exported second argument (file) name resulting csv-file. file argument provided, dialog box opened choose file interactively. default, writeSC exports standard csv-format dot decimal point comma separating variables. system expects comma instead point decimal numbers may use dec sep arguments. example, write_scdf(example, file = \"example.csv\", dec = \",\", sep = \";\") exports csv variation usually used example Germany.","code":""},{"path":"managing-single-case-data.html","id":"convert","chapter":"4 Managing single-case data","heading":"4.5 Convert an scdf object back to scan syntax","text":"can also reconvert scdf object back “raw” scan syntax. convenient way imported data Excel csv file want keep everything clean transparent within R syntax files.example:Now can copy past output R file set file argument save output R file convert(exampleABC, file = \"scdf.R\").","code":"\nconvert(exampleABC)case1 <- scdf(\n   values = c(58, 56, 60, 63, 51, 45, 44, 59, 45, 39, 83, 65, 70, 83, 70, 85, 47, 66, 77, 75, 51, 87, 80, 68, 70, 56, 52, 70, 83, 63), \n   phase_design = c(A = 10, B = 10, C = 10),\n   name = \"Marie\"\n)\n\ncase2 <- scdf(\n   values = c(47, 41, 47, 52, 54, 65, 55, 37, 51, 60, 60, 65, 55, 46, 49, 54, 77, 73, 97, 64, 84, 71, 66, 74, 78, 68, 52, 76, 63, 54), \n   phase_design = c(A = 15, B = 8, C = 7),\n   name = \"Rosalind\"\n)\n\ncase3 <- scdf(\n   values = c(50, 45, 63, 53, 66, 57, 35, 45, 74, 63, 47, 45, 47, 36, 51, 55, 35, 66, 59, 55, 73, 60, 85, 62, 79, 69, 87, 76, 90, 48), \n   phase_design = c(A = 20, B = 7, C = 3),\n   name = \"Lise\"\n)\n\nstudy <- c(case1, case2, case3)"},{"path":"managing-single-case-data.html","id":"displaying-scdf-files","chapter":"4 Managing single-case data","heading":"4.6 Displaying scdf-files","text":"scdf displayed just typing name object.print command allows specifying output. possible arguments cases (number cases displayed; Three default), rows (maximum number rows displayed; Fifteen default), digits (number digits). cases = '' rows = '' prints cases rows.argument long = TRUE prints case one instead side side (e.g., print(exampleAB, long = TRUE)).summary() gives concise overview scdf","code":"\n#Beretvas2008 is an example scdf included in scan\nBeretvas2008#A single-case data frame with one case\n\n Case1: values mt phase\n           0.7  1     A\n           1.6  2     A\n           1.4  3     A\n           1.6  4     A\n           1.9  5     A\n           1.2  6     A\n           1.3  7     A\n           1.6  8     A\n            10  9     B\n          10.8 10     B\n          11.9 11     B\n            11 12     B\n            13 13     B\n          12.7 14     B\n            14 15     B\n#Huber2014 is an example scdf included in scan\nprint(Huber2014, cases = 2, rows = 10)#A single-case data frame with 4 cases\n\n Adam: mt compliance phase ｜ Berta: mt compliance phase ｜\n        1         25     A ｜         1         25     A ｜\n        2       20.8     A ｜         2       20.8     A ｜\n        3       39.6     A ｜         3       39.6     A ｜\n        4         75     A ｜         4         75     A ｜\n        5         45     A ｜         5         45     A ｜\n        6       39.6     A ｜         6       14.6     A ｜\n        7       54.2     A ｜         7       45.8     A ｜\n        8         50     A ｜         8       33.3     A ｜\n        9       28.1     A ｜         9       31.3     A ｜\n       10         40     A ｜        10       32.5     A ｜\n# ... up to 66 more rows\n#  2 more cases\nsummary(Huber2014)#A single-case data frame with 4 cases\n\n           Measurements Design\n Adam                37    A-B\n Berta               29    A-B\n Christian           76    A-B\n David               76    A-B\n\nVariable names:\nmt <measurement-time variable>\ncompliance <dependent variable>\nphase <phase variable>\n\n\nNote:  Behavioral data (compliance in percent).\nAuthor of data:  Christian Huber "},{"path":"managing-single-case-data.html","id":"selecting-cases-and-measurements","chapter":"4 Managing single-case data","heading":"4.7 Selecting cases and measurements","text":"","code":""},{"path":"managing-single-case-data.html","id":"subsetting-cases-with-base-r-syntax","chapter":"4 Managing single-case data","heading":"4.7.1 Subsetting cases with base R syntax","text":"can extract one single-cases scdf multiple cases two ways. case name, can address $ operator.can use squared brackets","code":"\nHuber2014$David\nHuber2014[1] #extracts case 1\nHuber2014[2:3] #extracts cases 2 and 3\nnew.huber2014 <- Huber2014[c(1, 4)] #extracts cases 1 and 4\nnew.huber2014#A single-case data frame with 2 cases\n\n Adam: mt compliance phase ｜ David: mt compliance phase ｜\n        1         25     A ｜         1       65.6     A ｜\n        2       20.8     A ｜         2       37.5     A ｜\n        3       39.6     A ｜         3       58.3     A ｜\n        4         75     A ｜         4       72.9     A ｜\n        5         45     A ｜         5       33.3     A ｜\n        6       39.6     A ｜         6       59.4     A ｜\n        7       54.2     A ｜         7       77.1     A ｜\n        8         50     A ｜         8       54.2     A ｜\n        9       28.1     A ｜         9       68.8     A ｜\n       10         40     A ｜        10       43.8     A ｜\n       11       52.1     B ｜        11       62.5     B ｜\n       12       31.3     B ｜        12       64.6     B ｜\n       13       15.6     B ｜        13       60.4     B ｜\n       14       29.2     B ｜        14       81.3     B ｜\n       15       43.8     B ｜        15       79.2     B ｜\n# ... up to 61 more rows"},{"path":"managing-single-case-data.html","id":"select-cases","chapter":"4 Managing single-case data","heading":"4.7.2 Select cases","text":"Since version 0.53 scan includes functions work pipe-operators. Therefore, provide syntax examples without pipe operators.select_cases() function takes case-names /numbers selecting cases:","code":"\n# With pipes:\nHuber2014 %>%\n  select_cases(\"Adam\", \"Berta\", 4) %>%\n  summary()#A single-case data frame with 3 cases\n\n       Measurements Design\n Adam            37    A-B\n Berta           29    A-B\n David           76    A-B\n\nVariable names:\nmt <measurement-time variable>\ncompliance <dependent variable>\nphase <phase variable>\n\n\nNote:  Behavioral data (compliance in percent).\nAuthor of data:  Christian Huber \n# Without pipes:\n\n# new_huber <- select_cases(Huber2014, \"Adam\", \"Berta\", 4)\n# summary(new_huber)"},{"path":"managing-single-case-data.html","id":"subset","chapter":"4 Managing single-case data","heading":"4.7.3 Select measurements","text":"subset() function helps extracting measurements (rows) specific criteria scdf.Subset takes scdf first argument logical expression second argument (filter). measurements logical argument evaluated TRUE inlcuded returning scdf object.example, scdf Huber2014 variable compliance like keep measurements compliance larger 10 assume others outliers:complex example, like keep values lower 60 phase values equal larger 60 phase B:","code":"\nHuber2014 %>%\n  subset(compliance > 10) %>%\n  summary()#A single-case data frame with 4 cases\n\n           Measurements Design\n Adam                37    A-B\n Berta               20    A-B\n Christian           76    A-B\n David               76    A-B\n\nVariable names:\nmt <measurement-time variable>\ncompliance <dependent variable>\nphase <phase variable>\n\n\nNote:  Behavioral data (compliance in percent).\nAuthor of data:  Christian Huber \nexampleAB %>%\n  subset((values < 60 & phase == \"A\") | (values >= 60 & phase == \"B\")) %>%\n  summary()#A single-case data frame with 3 cases\n\n          Measurements Design\n Johanna            20    A-B\n Karolina           18    A-B\n Anja               19    A-B\n\nVariable names:\nvalues <dependent variable>\nmt <measurement-time variable>\nphase <phase variable>\n\n\nNote:  Randomly created data with normal distributed dependent variable."},{"path":"managing-single-case-data.html","id":"change-and-create-variables","chapter":"4 Managing single-case data","heading":"4.8 Change and create variables","text":"","code":""},{"path":"creating-a-single-case-data-plot.html","id":"creating-a-single-case-data-plot","chapter":"5 Creating a single-case data plot","heading":"5 Creating a single-case data plot","text":"Plotting data first important approach analyzing. build scdf plot command helps visualize data. scdf includes one case multiple baseline figure provided. Various arguments can set customize appearance plot. Table 5.1 gives overview available arguments.\nFigure 5.1: simple plot need much.\n","code":"\nplot(exampleA1B1A2B2_zvt)"},{"path":"creating-a-single-case-data-plot.html","id":"plot-axis","chapter":"5 Creating a single-case data plot","heading":"5.1 Plot axis","text":"Labels axes phases can changed xlab, ylab, phase.names arguments. x- y-scaling graphs default calculated minimum maximum included single cases. xlim ylim argument used set specific values. argument takes vector two numbers. first lower second upper limit scale. case multiple single cases NA sets individual minimum maximum case. Assume example study contains three single cases ylim = c(0, NA) set lower limit three single cases 0 upper limit individually maximum case. argument xinc sets incremental steps x-axis ticks corresponding values. example xinc = 1 set tick every measurement time increase 1 xinc = 5 set every ffith tick.\nFigure 5.2: plot various axis specidications.\n\nTable 5.1: Arguments plot function\n","code":"\nplot(\n  exampleABC,\n  phase.names = c(\"Baseline\", \"Intervention\", \"Follow-Up\"),\n  case.names = c(\"First\", \"Second\", \"Third\"),\n  ylab = \"Frequency\",\n  xlab = \"Days\",\n  main = \"An example\",\n  ylim = c(0, 120),\n  xinc = 2\n)"},{"path":"creating-a-single-case-data-plot.html","id":"adding-lines","chapter":"5 Creating a single-case data plot","heading":"5.2 Adding lines","text":"Extra lines can added plot using lines argument. lines argument takes several separate sub-arguments provided list. simple form list contains one element. lines = list(type = 'median') adds line median phase plot. Additional arguments like col lwd help format lines. adding red thick median lines use command lines = list(type = 'median', col = 'red', lwd = '2').\nTable 5.2: Values lines argument\n\nFigure 5.3: plot various visual aids\n","code":"\nplot(\n  exampleAB, \n  lines = list(\n    list(type = \"median\", col = \"red\", lwd = 0.5),\n    list(type = \"trend\", col = \"blue\", lty = \"dashed\", lwd = 2),\n    list(type = \"loreg\", f = 0.2, col = \"green\", lty = \"solid\", lwd = 1)\n  )\n)"},{"path":"creating-a-single-case-data-plot.html","id":"mark-data-points","chapter":"5 Creating a single-case data plot","heading":"5.3 Mark data points","text":"Specific data points can highlighted using marks argument. list defines measurement times marked, marking color size marking. marks = list(position = c(1,5,6)) marks first, fifth, sixth measurement time. scdf contains one data-set marking data sets example. case define list Containing vectors, marking can individually defined data set. Assume, example, scdf comprising three data sets, marks = list(position = list(c(1,2), c(3,4), c(5,6))) highlight measurement times one two first data set, three four second five six third. pch, col cex define symbol, colour size markings.\nFigure 5.4: plot highlighted data-points\n","code":"\n# plot with marks in a red circles 2.5 times larger than the standard symbol \n# size. exampleAB is an example scdf included in the scan package\nmarks <- list(\n  positions = list( c(8, 9), c(17, 19), c(7, 18) ), \n  col = 'red', cex = 2.5, pch = 1\n)\nplot(exampleAB, marks = marks, style = \"sienna\")"},{"path":"creating-a-single-case-data-plot.html","id":"graphical-styles-of-a-plot","chapter":"5 Creating a single-case data plot","heading":"5.4 Graphical styles of a plot","text":"style argument plot function allows specify specific design plot. default, grid style applied. scan includes predefined styles. default, yaxis, tiny, small, big, chart, ridge, annotate, grid, grid2, dark, nodot, sienna. name style provided character string (e.g., style = \"grid\").\nstyles address specific elements (e.g., “small” “tiny” just influence text line sizes). styles lend combined styles. achieved providing several style names plot argument: style = c(\"grid\", \"annotate\", \"small\"). style overwrites settings previously included style.\nBeyond predefined styles, styles can individually modified created. New styles provided list several design parameters passed style argument plot function. Table 5.3 shows design parameter defined.\ndefine new style, first create list containing plain design. style_plot function returns list default values plain design (e.g., mystyle <- style_plot()). Single design parameters can now set assigning specific value within list. example, newstyle$fill <- \"grey90\" set fill parameter \"grey90\". Alternatively, changes plain design can already defined within style_plot function. set light-blue background color also orange grid, create style style_plot(fill.bg = \"lightblue\", grid = \"orange\").\nwant start plain design different predefined styles, set style argument. , example, like grid combined big style want change color grid orange type style_plot(style = c(\"grid\", \"big\"), col.grid = \"orange\"). plot(mydata, style = mystyle) apply new style plot. Please note new style passed quotation marks.\nTable 5.3: Arguments style plot function\nwidth lines set lwd argument, col used set line colour pch sets symbol data point.\npch argument can take several values defining symbol data points plotted.\n(#fig:symbols, pch)possible symbols pch values.\nexample customizing plot several additional graphic parameters\n(#fig:custom_style_example)plot customized style.\n","code":"\nnewstyle <- style_plot(\n  fill = \"grey95\",\n  fill.bg = c('aliceblue', 'mistyrose1', 'honeydew'),\n  names = list(col = \"brown\", cex = 2, font = 3, side = 3),\n  annotations = list(col = \"brown\"),\n  col.dots = \"blue\",\n  grid = \"lightblue\", \n  pch = 16)\n\nplot(exampleABAB, style = newstyle)"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"describe-and-manipulate-single-case-data-frames","chapter":"6 Describe and manipulate single-case data frames","heading":"6 Describe and manipulate single-case data frames","text":"","code":""},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"describing-and-summarizing","chapter":"6 Describe and manipulate single-case data frames","heading":"6.1 Describing and summarizing","text":"short description scdf provided summary command. results pretty much self explainingdescribe basic command get overview descriptive statistics. argument takes name scdf object. case scdf phase within case descriptive statistics provided. output table contains statistical indicators followed dot name phase (e.g., n.number measurements phase ).\nTable 6.1: Statistics describe command\nresulting table exported csv file used software (e.g., inserted word processing document). Therefore, first write results describe command R object use write.csv (write.csv2 German OS system setup) export descriptives element object.file written currently active working directory. sure , type getwd() (can use setwd() command define different working directory. get details type help(setwd) R).\nConflicting function names\nSometimes R packages include function names. example, \ndescribe() function also part psych\npackage. Now, loaded psych package \nlibrary(psych) scan \ndescribe() function scan masked\n(describe() now call corresponding function \npsych package).\ntwo solutions problem:\n\nactivate psych library scan\nlibrary (now psych describe() function masked)\n\n\ninclude package name function call prefix\nscan::: scan::describe().\n","code":"\nsummary(Huber2014)#A single-case data frame with 4 cases\n\n           Measurements Design\n Adam                37    A-B\n Berta               29    A-B\n Christian           76    A-B\n David               76    A-B\n\nVariable names:\nmt <measurement-time variable>\ncompliance <dependent variable>\nphase <phase variable>\n\n\nNote:  Behavioral data (compliance in percent).\nAuthor of data:  Christian Huber \ndescribe(exampleABC)Describe Single-Case Data\n\n       Marie Rosalind  Lise\nDesign A-B-C    A-B-C A-B-C\nn.A       10       15    20\nn.B       10        8     7\nn.C       10        7     3\nmis.A      0        0     0\nmis.B      0        0     0\nmis.C      0        0     0\n\n          Marie Rosalind    Lise\nm.A      52.000   52.267  52.350\nm.B      72.100   73.250  73.571\nm.C      68.000   66.429  71.333\nmd.A       53.5     52.0    52.0\nmd.B       72.5     72.0    73.0\nmd.C         69       68      76\nsd.A      8.287    8.146  10.869\nsd.B     11.367   13.134  10.644\nsd.C     12.702   10.486  21.385\nmad.A    11.119    7.413  10.378\nmad.B    10.378   10.378  16.309\nmad.C    17.791   11.861  20.756\nmin.A        39       37      35\nmin.B        47       54      60\nmin.C        51       52      48\nmax.A        63       65      74\nmax.B        85       97      87\nmax.C        87       78      90\ntrend.A  -1.915    0.500  -0.088\ntrend.B  -0.612    0.643   1.929\ntrend.C  -0.194   -2.929 -14.000\n# write the results into a new R object named `res`\nres <- describe(exampleABC)\n# create a new file containing the descriptives on your harddrive\nwrite.csv(res$descriptives, file = \"descriptive data.csv\")"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"autoregression-and-trendanalyses","chapter":"6 Describe and manipulate single-case data frames","heading":"6.2 Autoregression and trendanalyses","text":"autocorr function calculates autocorrelations within phase across phases. lag.max argument defines lag autocorrelation computed.trend function provides overview linear trends single-case data. default, gives intercept slope linear squared regression measurement-time scores. Models computed separately phase across phases. advanced application, can add regression models using R specific formula class.","code":"\nautocorr(exampleABC, lag.max = 4)Autocorrelations\n\nMarie \n Phase Lag 1 Lag 2 Lag 3 Lag 4\n     A  0.29 -0.11  0.10  0.12\n     B -0.28 -0.10 -0.14 -0.09\n     C  0.00 -0.33 -0.14 -0.25\n   all  0.21  0.10  0.25  0.12\n\nRosalind \n Phase Lag 1 Lag 2 Lag 3 Lag 4\n     A  0.37 -0.29 -0.33 -0.34\n     B -0.34  0.24 -0.40  0.04\n     C -0.07 -0.32  0.27  0.02\n   all  0.49  0.38  0.22  0.17\n\nLise \n Phase Lag 1 Lag 2 Lag 3 Lag 4\n     A  0.04 -0.32 -0.05 -0.09\n     B -0.63  0.50 -0.40  0.31\n     C -0.38 -0.12    NA    NA\n   all  0.33  0.36  0.23  0.27\n# Simple example\ntrend(exampleABC[1])Trend for each phase\n\n            Intercept      B   Beta\nLinear.ALL     55.159  0.612  0.392\nLinear.A       60.618 -1.915 -0.700\nLinear.B       74.855 -0.612 -0.163\nLinear.C       68.873 -0.194 -0.046\nSquared.ALL    59.135  0.017  0.330\nSquared.A      57.937 -0.208 -0.712\nSquared.B      73.217 -0.039 -0.098\nSquared.C      68.490 -0.017 -0.038\n\nNote. Measurement-times start at 0  for each phase\n# Complex example\ntrend(exampleAB$Johanna, offset = 0, \n        model = c(\"Cubic\" = values ~ I(mt^3), \"Log Time\" = values ~ log(mt))\n)Trend for each phase\n\n             Intercept      B   Beta\nLinear.ALL      50.484  1.787  0.908\nLinear.A        54.300  0.100  0.066\nLinear.B        61.133  1.625  0.813\nSquared.ALL     57.879  0.079  0.871\nSquared.A       54.747 -0.013 -0.054\nSquared.B       66.343  0.094  0.775\nCubic.ALL       60.886  0.004  0.816\nCubic.A         54.959 -0.008 -0.169\nCubic.B         68.368  0.006  0.732\nLog Time.ALL    43.532 12.149  0.848\nLog Time.A      54.032  0.593  0.156\nLog Time.B      57.300  9.051  0.791\n\nNote. Measurement-times start at 1  for each phase"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"missing-values","chapter":"6 Describe and manipulate single-case data frames","heading":"6.3 Missing values","text":"two kinds missing values single-case data series. First, missings explicitly recorded NA assigned phase measurement-time following example:second type missing occurs gaps measurement-times explicitly coded following example:cases, missing values pose threat internal validity overlap indices. Randomization tests robust first type missing values affected second type. Regression approaches less impacted types take interval measurement-times account.","code":"scdf(c(5, 3, 4, 6, 8, 7, 9, 7, NA, 6), phase_design = c(A = 4, B = 6))scdf(c(5, 3, 4, 6, 8, 7, 9, 7, 6), phase_design = c(A = 4, B = 5), \n     mt = c(1, 2, 3, 4, 5, 6, 7, 8, 10))\ncase1 <- scdf(c(3,6,2,4,3,5,2,6,3,2, 6,7,5,8,6,7,4,8,5,6), \n              phase_design = c(A = 10, B = 10), name = \"no NA\")\ncase2 <- scdf(c(3,6,2,4,3,5,2,NA,3,2, 6,7,5,8,6,NA,4,8,5,6), \n              phase_design = c(A = 10, B = 10), name = \"NAs\")\ncase3 <- fill_missing(case2)\nnames(case3) <- \"interpolated NAs\"\nex <- c(case1, case2, case3)\nplot(ex)\noverlap(ex)Overlap Indices\n\nComparing phase 1 against phase 2 \n\n             no NA  NAs interpolated NAs\nDesign         A-B  A-B              A-B\nPND             40   33               30\nPEM            100  100              100\nPET            100  100              100\nNAP             88   91               92\nNAP rescaled    77   83               83\nPAND            72   81               80\nTau_U         0.45 0.51             0.50\nBase_Tau      0.59 0.64             0.64\nDiff_mean     2.60 2.78             2.75\nDiff_trend    0.02 0.11             0.12\nSMD           1.65 1.96             2.02\nHedges_g      1.71 1.90             1.96"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"outlieranalysis","chapter":"6 Describe and manipulate single-case data frames","heading":"6.4 Outlieranalysis","text":"scan provides several methods analyzing outliers. implemented outliers function. Available methods standard deviation, mean average deviation, confidence intervals, Cook’s distance. criteria argument takes vector two information, first defines analyzing method (“SD”, “MAD”, CI”, “Cook”) second criteria. “SD” criteria number standard deviations (sd) mean phase value considered outlier. example, criteria = c(\"SD\",2) identify every value exceeding two sd mean outlier whereas sd mean refer phase value. might misleading particularly small samples Iglewicz Hoaglin Iglewicz & Hoaglin (1993) recommend use much robust median average deviation (MAD) instead. MAD constructed similar sd uses median instead mean. Multiplying MAD 1.4826 approximates sd normal distributed sample. corrected MAD applied outlier function. deviation 3.5 times corrected MAD median suggested outlier. use criterion set criteria = c(\"MAD\", 3.5). criteria = c(\"CI\", 0.95) takes exceeding 95% confidence interval criteria outliers. Cook’s distance method calculation outliers can applied strict AB-phase design. case, Cook’s distance analyses based piecewise-regression model. commonly, Cook’s distance exceeding 4/n used criteria. implemented setting `criteria = c(“Cook”,“4/n”).","code":"\noutlier(exampleABC_outlier, criteria = c(\"MAD\", 3.5))Outlier Analysis for Single-Case Data\n\nCriteria: Exceeds 3.5 Mean Average Deviations\n\n$Bernadette\n  phase md mad   lower    upper\n1     A 57   9 10.2981 103.7019\n2     B 76   7 39.6763 112.3237\n3     C 69  12  6.7308 131.2692\n\n$Penny\n  phase md mad   lower    upper\n1     A 52   6 20.8654  83.1346\n2     B 74  10 22.1090 125.8910\n3     C 68   8 26.4872 109.5128\n\n$Amy\n  phase md mad   lower    upper\n1     A 54   9  7.2981 100.7019\n2     B 73  11 15.9199 130.0801\n3     C 76  14  3.3526 148.6474\n\nCase Bernadette : Dropped 3 \nCase Penny : Dropped 2 \nCase Amy : Dropped 3 \n# Visualizing outliers with the plot function\nres <- outlier(exampleABC_outlier, criteria = c(\"MAD\", 3.5))\nplot(exampleABC_outlier, marks = res, style = \"annotate\", ylim = c(40,160))"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"smoothing-data","chapter":"6 Describe and manipulate single-case data frames","heading":"6.5 Smoothing data","text":"smooth_cases function provides procedures smooth single-case data eliminate noise. moving average function (mean- median-based) replaces data point average surrounding data points step--step. lag defines number measurements calculation based . lag-1 take average proceeding following value lag-2 average two proceeding two following measurements. local regression function, data point regressed surrounding data points. , proportion measurements surrounding value usually defined. intensity 0.2 take surrounding 20% data basis regression.\nfunction returns scdf smoothed data points.","code":"\n## Use the three different smoothing functions and compare the results\nberta_mmd <- smooth_cases(Huber2014$Berta)\nberta_mmn <- smooth_cases(Huber2014$Berta, FUN = \"movingMean\")\nberta_lre <- smooth_cases(Huber2014$Berta, FUN = \"localRegression\")\nnew_study <- c(Huber2014$Berta, berta_mmd, berta_mmn, berta_lre)\nnames(new_study) <- c(\"Original\", \"Moving Median\", \"Moving Mean\", \"Local Regression\")\nplot(new_study, style = \"grid2\")"},{"path":"overlapping-indices.html","id":"overlapping-indices","chapter":"7 Overlapping indices","heading":"7 Overlapping indices","text":"","code":""},{"path":"overlapping-indices.html","id":"overlap-overview","chapter":"7 Overlapping indices","heading":"7.1 Overlap overview","text":"overlap provides table important overlap indices case scdf. calculating overlap indicators important know decrease increase values expected phases. default overlap assumes increase values. argument decreasing = TRUE set, calculation based assumption decreasing values.Overlap measures refer comparison two phases within single-case data-set. default, overlap compares first second phase.","code":"\noverlap(exampleAB)Overlap Indices\n\nComparing phase 1 against phase 2 \n\n             Johanna Karolina  Anja\nDesign           A-B      A-B   A-B\nPND              100       87    93\nPEM              100      100   100\nPET              100       93   100\nNAP              100       97    98\nNAP rescaled     100       93    96\nPAND             100       90    90\nTau_U           0.77     0.78  0.64\nBase_Tau        0.63     0.59  0.61\nDiff_mean      19.53    21.67 20.47\nDiff_trend      1.53     0.54  2.50\nSMD             8.11     3.17  6.71\nHedges_g        2.35     2.26  2.87"},{"path":"overlapping-indices.html","id":"select-phases","chapter":"7 Overlapping indices","heading":"7.1.1 Select and recombine phases","text":"select_phases() function needed like compare specific phases even like combine several phases. select_phases() designed work within pipe structure. first argument scdf returns scdf.select_phases() arguments B. argument takes vector names numbers phases selected. want compare first third phase can set select_phases(scdf, 1,3). phases case named ‘’, ‘B’, ‘C’ alternatively set select_phases(scdf, \"\",\"C\"). also possible compare combination several cases combination phases. two list-elements contain one phase concatenated c command. example ABAB-Design like compare two -phases two B-phases select_phases(scdf, c(1,3), c(2,4) ) trick.(alternative approach can set phases argument within overlap() function. argument takes list two elements first element defines phases -phase second argument phases B-phase.)","code":"\nscdf %>% select_phases(A = 1, B = 3) %>% ...\nexampleA1B1A2B2 %>%\n  select_phases(c(\"A1\",\"A2\"), c(\"B1\",\"B2\")) %>%\n  overlap()Overlap Indices\n\nComparing phase 1 against phase 2 \n\n             Pawel Moritz Jannis\nDesign         A-B    A-B    A-B\nPND             55     78     71\nPEM            100    100    100\nPET            100    100    100\nNAP             94     97     98\nNAP rescaled    89     94     97\nPAND            82     85     90\nTau_U         0.45   0.46   0.38\nBase_Tau      0.65   0.68   0.68\nDiff_mean    12.25  13.58  15.27\nDiff_trend   -0.05   0.00  -0.54\nSMD           2.68   3.27   3.62\nHedges_g      2.07   2.72   2.98\n# Alternatively:\n# overlap(exampleA1B1A2B2, phases = list( c(\"A1\",\"A2\"), c(\"B1\",\"B2\")))"},{"path":"overlapping-indices.html","id":"standardized-mean-differences","chapter":"7 Overlapping indices","heading":"7.2 Standardized mean differences","text":"Standardized mean differences can calculated various ways. refer difference means two phases. smd function provides overview common parameters single-case:","code":"\nsmd(exampleAB_score)Standardized mean differences\n\n                            Christiano Lionel Neymar\nmA                                2.70   3.10   2.30\nmB                               15.35  15.35  15.60\nsdA                               1.42   1.59   1.49\nsdB                               2.13   1.60   2.19\nsd cohen                          1.81   1.60   1.87\nsd hedges                         1.93   1.60   1.99\nGlass' delta                      8.92   7.68   8.90\nHedges' g                         6.54   7.67   6.68\nHedges' g correction              6.37   7.46   6.50\nHedges' g durlak correction       6.15   7.21   6.28\nCohen's d                         6.98   7.67   7.10"},{"path":"overlapping-indices.html","id":"percentage-non-overlapping-data-pnd","chapter":"7 Overlapping indices","heading":"7.3 Percentage non-overlapping data (PND)","text":"percentage non-overlapping data (PND) effect size measure described Scruggs, Mastropieri, & Casto (1987) . percentage data-points second phase single-case study exceeding maximum value first phase. case study expect decrease values second phase, PND calculated percentage data-point second phase minimum first phase.\nFigure 7.1: Illustration PND. PND 60% 9 15 datapoints phase B higher maximum phase .\nfunction pnd provides PND case well mean PNDs scdf. expect decreasing values set decreasing = TRUE. two phases phases named B, use phases argument described beginning chapter.","code":"\npnd(exampleAB)Percent Non-Overlapping Data\n\n     Case    PND Total Exceeds\n  Johanna   100%    15      15\n Karolina 86.67%    15      13\n     Anja 93.33%    15      14\n\nMean  : 93.33 %"},{"path":"overlapping-indices.html","id":"percentage-exceeding-the-median-pem","chapter":"7 Overlapping indices","heading":"7.4 Percentage exceeding the median (PEM)","text":"pem function returns percentage phase B data exceeding phase median. Additionally, binomial test 50/50 distribution computed. Different measures central tendency can addressed alternative analyses.\nFigure 7.2: Illustration PEM. PEM 75% 13 15 datapoints phase B higher median phase .\n","code":"\npem(exampleAB)Percent Exceeding the Median\n\n         PEM positives total binom.p\nJohanna  100        15    15       0\nKarolina 100        15    15       0\nAnja     100        15    15       0\n\nAlternative hypothesis: true probability > 50%"},{"path":"overlapping-indices.html","id":"percentage-exceeding-the-regression-trend-pet","chapter":"7 Overlapping indices","heading":"7.5 Percentage exceeding the regression trend (PET)","text":"pet function provides percentage phase B data points exceeding prediction based phase trend. binomial test 50/50 distribution computed. Furthermore, percentage phase B data points exceeding upper (lower) 95 percent confidence interval predicted progress computed.\nFigure 7.3: Illustration PET. PET 66.7% 10 15 datapoints phase B higher projected trend-line phase .\n","code":"\npet(exampleAB)Percent Exceeding the Trend\n\nN cases =  3 \n\n             PET binom.p  PET CI\nJohanna  100.000       0  86.667\nKarolina  93.333       0   0.000\nAnja     100.000       0 100.000\n\nBinom.test: alternative hypothesis: true probability > 50%\nPET CI: Percent of values greater than upper 95% confidence threshold (greater 1.645*se above predicted value)"},{"path":"overlapping-indices.html","id":"percentage-of-all-non-overlapping-data-pand","chapter":"7 Overlapping indices","heading":"7.6 Percentage of all non-overlapping data (PAND)","text":"pand function calculates percentage non-overlapping data (Richard . Parker, Hagan-Burke, & Vannest, 2007), index quantify level increase (decrease) performance onset intervention. argument correction = TRUE makes pand use frequency matrix, corrected ties. tie counted half measurement phases. Set correction = FALSE use uncorrected matrix, recommended.PAND indicates nonoverlap phase B data (like PND), uses data therefore based one single (probably unrepresentative) datapoint. Furthermore, PAND allows comparison real expected associations (Chi-square test) estimation effect size Phi, equals Pearsons r dichotomous data. Thus, phi-Square amount explained variance. original procedure computing PAND account ambivalent datapoints (ties). newer NAP overcomes problem better precision-power (Richard . Parker, Vannest, & Davis, 2011).","code":"\npand(exampleAB)Percentage of all non-overlapping data\n\nPAND =  93.3 %\nΦ =  0.822  ; Φ² =  0.676 \n\nNumber of cases: 3 \nTotal measurements: 60  (in phase A: 15; in phase B: 45)\nn overlapping data per case: 0, 2, 2\nTotal overlapping data: n = 4 ; percentage = 6.7 \n\n2 x 2 Matrix of proportions\n    % expected\n    A   B   total\n%    A  21.7    3.3 25\nreal B  3.3 71.7    75\n total  25  75\n\n2 x 2 Matrix of counts\n    expected\n    A   B   total\n     A  13  2   15\nreal B  2   43  45\n total  15  45\n\n\nNote. Matrix is corrected for ties\n\nCorrelation based analysis:\n\nz = 6.316, p = 0.000, τ = 0.822 "},{"path":"overlapping-indices.html","id":"nonoverlap-of-all-pairs-nap","chapter":"7 Overlapping indices","heading":"7.7 Nonoverlap of all pairs (NAP)","text":"nap function calculates nonoverlap pairs (Richard . Parker & Vannest, 2009). NAP summarizes overlap pairs phase phase B data points. increase phase B scores expected, non-overlapping pair higher phase B data point. NAP equals number pairs showing overlap / number pairs. NAP can take values 50 100 percent, rescaled therefore intuitive NAP (0-100%) also displayed. NAP equivalent U-test Wilcox rank sum test. Thus, Wilcox test conducted reported case.","code":"\nnap(exampleAB)Nonoverlap of All Pairs\n\n     Case NAP Rescaled Pairs Positives Ties   W       p\n  Johanna 100      100    75        75    0 0.0 0.00062\n Karolina  97       93    75        72    1 2.5 0.00129\n     Anja  98       96    75        73    1 1.5 0.00095"},{"path":"overlapping-indices.html","id":"tau-u","chapter":"7 Overlapping indices","heading":"7.8 Tau-U","text":"Tau-U statistic proposed Richard . Parker, Vannest, Davis, & Sauber (2011a) one broadly used approach reporting effect sizes single case data. Unfortunately, various ambiguous implementations Tau-U exist (Brossart, Laird, & Armstrong, 2018; Pustejovsky, 2016). tau_u function tries cover several implementation. takes scdf returns Tau-U calculations single-case within file. Additionally, overall Tau-U value calculated cases based meta-analysis.Several arguments set define Tau-U calculated. setting argument method = \"parker\", Tau-U calculated described Richard . Parker et al. (2011a). procedure lead Tau-U values 1 -1 difficult interpret. method = \"complete, default, applies correction keeps values within -1 1 range appropriate. original method proposed Richard . Parker et al. (2011a) data, calculations based Kendall’s Tau correct ties. Alternatively, Kendall’s Tau B correction Tau presence ties. tau_method` can set decide tau method use \"\" Kendall’s Tau \"b\"` Kendall’s Tau B.example setting reconstruct values original example Richard . Parker, Vannest, Davis, & Sauber (2011b) :different implementation method (provided http://www.singlecaseresearch.org/calculators/tau-u)) uses Kendall’s Tau B:different online calculator created Rumen Manolov available https://manolov.shinyapps.io/Overlap/ applies R code developed Kevin Tarlow caluclating Tau-U. setting replicated results approach:standard return tau_u function display calculations. like details, apply print function additional argument complete = TRUE.provide multiple single-cases tau-u function, calculate Tau-U table case overall calculation. overall Tau-U value average Tau-U values weighted standard error. can choose random- fixed-effect approach meta-analyses (meta_method = \"random\" \"fixed\").","code":"\ntau_u(Parker2011, method = \"parker\", tau_method = \"a\", continuity_correction = FALSE, ci = NA)Tau-U\nMethod: parker \nApplied Kendall's Tau-a\n\nCase: Case1 \n                              Tau SE_Tau    Z     p\nA vs. B                     0.800  0.408 1.96 0.050\nA vs. B - Trend A           0.650  0.480 1.35 0.175\nA vs. B + Trend B           0.767  0.320 2.40 0.016\nA vs. B + Trend B - Trend A 0.556  0.266 2.08 0.037\ntau_u(exampleAB$Johanna, method = \"parker\", tau_method = \"b\", continuity_correction = FALSE)Tau-U\nMethod: parker \nApplied Kendall's Tau-b\n\nCase: Johanna \n                              Tau SE_Tau    Z     p\nA vs. B                     1.000  0.306 3.27 0.001\nA vs. B - Trend A           0.592  0.184 3.22 0.001\nA vs. B + Trend B           0.786  0.166 4.75 0.000\nA vs. B + Trend B - Trend A 0.765  0.163 4.71 0.000\ntau_u(exampleAB$Johanna, method = \"complete\", tau_method = \"a\", continuity_correction = FALSE)Tau-U\nMethod: complete \nApplied Kendall's Tau-a\n\nCase: Johanna \n                              Tau SE_Tau    Z     p\nA vs. B                     1.000  0.306 3.27 0.001\nA vs. B - Trend A           0.882  0.363 2.43 0.015\nA vs. B + Trend B           0.806  0.171 4.70 0.000\nA vs. B + Trend B - Trend A 0.763  0.162 4.70 0.000\ntau_u(exampleAB$Johanna) %>% print(complete = TRUE)Tau-U\nMethod: complete \nApplied Kendall's Tau-b\n95% CIs for tau are reported.\n\nCase: Johanna \n                            pairs pos neg ties   S   D   Tau CI lower CI upper\nA vs. B                        75  75   0    0  75  75 1.000    0.401    1.599\nTrend A                        10   5   5    0   0  10 0.000      NaN      NaN\nTrend B                       105  87  17    1  70 104 0.670    0.291    1.049\nA vs. B - Trend A              85  80   5    0  75 127 0.592    0.232    0.951\nA vs. B + Trend B             180 162  17    1 145 184 0.786    0.462    1.111\nA vs. B + Trend B - Trend A   190 167  22    1 145 189 0.765    0.447    1.084\n                             SD_S VAR_S SE_Tau    Z     p\nA vs. B                     22.91 525.0  0.306 3.27 0.001\nTrend A                      4.08  16.7    NaN 0.00 1.000\nTrend B                     20.21 408.3  0.193 3.46 0.001\nA vs. B - Trend A           23.26 541.2  0.184 3.22 0.001\nA vs. B + Trend B           30.53 932.4  0.166 4.75 0.000\nA vs. B + Trend B - Trend A 30.81 949.0  0.163 4.71 0.000\ntau_u(exampleAB)Tau-U\nMethod: complete \nApplied Kendall's Tau-b\n95% CIs for tau are reported.\n\nOverall Tau-U\nMeta-anlysis model: random effect\n\n                       Model Tau_U     se CI lower CI upper    z        p\n                     A vs. B 0.969 0.1772    0.622    1.316 5.47 4.54e-08\n           A vs. B - Trend A 0.590 0.1064    0.381    0.798 5.54 3.04e-08\n           A vs. B + Trend B 0.740 0.0960    0.552    0.928 7.71 1.29e-14\n A vs. B + Trend B - Trend A 0.731 0.0942    0.546    0.915 7.75 9.09e-15\n\nCase: Johanna \n                              Tau SE_Tau    Z     p\nA vs. B                     1.000  0.306 3.27 0.001\nA vs. B - Trend A           0.592  0.184 3.22 0.001\nA vs. B + Trend B           0.786  0.166 4.75 0.000\nA vs. B + Trend B - Trend A 0.765  0.163 4.71 0.000\n\nCase: Karolina \n                              Tau SE_Tau    Z     p\nA vs. B                     0.940  0.308 3.06 0.002\nA vs. B - Trend A           0.554  0.184 3.01 0.003\nA vs. B + Trend B           0.805  0.166 4.85 0.000\nA vs. B + Trend B - Trend A 0.783  0.163 4.81 0.000\n\nCase: Anja \n                              Tau SE_Tau    Z     p\nA vs. B                     0.966  0.308 3.14 0.002\nA vs. B - Trend A           0.624  0.186 3.36 0.001\nA vs. B + Trend B           0.626  0.167 3.74 0.000\nA vs. B + Trend B - Trend A 0.642  0.164 3.91 0.000"},{"path":"overlapping-indices.html","id":"baseline-corrected-tau","chapter":"7 Overlapping indices","heading":"7.9 Baseline corrected tau","text":"method proposed Tarlow (2016). baseline data checked significant autocorrelation (based Kendalls Tau). , non-parameteric Theil-Sen regression applied baseline data dependent values regressed measurement time. resulting slope information used predict data B-phase. dependent variable now corrected baseline trend residuals Theil-Sen regression taken calculations. Finally, Kendalls tau calculated dependent variable dichotomous phase variable. function provides two extensions procedure: alternative Siegel repeated median regression applied repeated = TRUE (Siegel, 1982) continuity correction applied continuity = TRUE (defaults).replication example provided Tarlow (2016) :","code":"Warning: Removed 11 row(s) containing missing values (geom_path).Baseline corrected tau\n\nMethod: Theil-Sen regression\nContinuity correction not applied.\n\n                           tau     z     p\nBaseline autocorrelation -0.75 -2.31  <.05\nUncorrected tau          -0.58 -2.98  <.01\nBaseline corrected tau    0.69  3.57 <.001\n\nBaseline correction should be applied."},{"path":"overlapping-indices.html","id":"reliable-change-index","chapter":"7 Overlapping indices","heading":"7.10 Reliable change index","text":"Basically, reliable change index (rci) depicts post-test pre-test value. Based reliability measurements standard-deviation standard error calculated. mean difference phase-phase-B divided standard-error. Several authors proposed refined methods calculating rci.rci function computes three indices reliable change (Wise, 2004) corresponding descriptive statistics.","code":"\nrci(exampleAB$Johanna, rel = 0.8, graph = TRUE)Reliable Change Index\n\nMean Difference =  19.53333 \nStandardized Difference =  1.678301 \n\nDescriptives:\n         n     mean       SD       SE\nA-Phase  5 54.60000 2.408319 1.077033\nB-Phase 15 74.13333 8.943207 3.999524\n\nReliability =  0.8 \n\n95 % Confidence Intervals:\n           Lower    Upper\nA-Phase 52.48905 56.71095\nB-Phase 66.29441 81.97226\n\nReliable Change Indices:\n                             RCI\nJacobson et al.         18.13624\nChristensen and Mendoza 12.82426\nHageman and Arrindell   18.49426"},{"path":"piecewise-linear-regressions.html","id":"piecewise-linear-regressions","chapter":"8 Piecewise linear regressions","heading":"8 Piecewise linear regressions","text":"piecewise-regression analysis (sometimes called segmented regression) dataset split specific break point regression parameters (intercept slopes) calculated separately data break point. done assume break point qualitative change happens affecting intercept slope. approach lends perfectly analyze single-case data statistical point view time-series data segmented phases. general model single-case data based piecewise regression approach suggested Huitema McKean Huitema & Mckean (2000). refer two-phase single-case designs pre-intervention phase containing measurements start intervention (-phase) intervention phase containing measurements beginning intervention’s start lasting throughout intervention (B-phase).model, four parameters predict outcome specific measurement point:performance beginning study (intercept),performance beginning study (intercept),developmental effect leading continuous increase throughout measurements (trend effect),developmental effect leading continuous increase throughout measurements (trend effect),intervention effect leading immediate constant increase performance (level effect), andan intervention effect leading immediate constant increase performance (level effect), anda second intervention effect evolves continuously beginning intervention (slope effect).second intervention effect evolves continuously beginning intervention (slope effect).scan provides implementation based piecewise-regression approach. Though original model extended several factors:multiple phase designsadditional (control) variablesautoregression modelinglogistic, binomial, poisson distributed dependent variables error termsmultivariate analyzes analyzing effect intervention one outcome variable.","code":""},{"path":"piecewise-linear-regressions.html","id":"the-basic-plm-function","chapter":"8 Piecewise linear regressions","heading":"8.1 The basic plm function","text":"basic function applying regression analyzes single-case dataset plm. function analyzes one single-case. simplest way, plm takes one argument scdf object returns full piecewise-regression analyzes.","code":"\nplm(exampleAB$Johanna)Piecewise Regression Analysis\n\nDummy model: W first\n\nFitted a gaussian distribution.\nF(3, 16) = 28.69; p = 0.000; R² = 0.843; Adjusted R² = 0.814\n\n                   B   2.5%  97.5%    SE      t     p delta R²\nIntercept     54.400 46.776 62.024 3.890 13.986 0.000         \nTrend mt       0.100 -3.012  3.212 1.588  0.063 0.951   0.0000\nLevel phase B  7.858 -3.542 19.258 5.816  1.351 0.195   0.0179\nSlope phase B  1.525 -1.642  4.692 1.616  0.944 0.359   0.0087\n\nAutocorrelations of the residuals\n lag    cr\n   1 -0.32\n   2 -0.13\n   3 -0.01\n\nFormula: values ~ 1 + mt + phaseB + interB"},{"path":"piecewise-linear-regressions.html","id":"dummy-model","chapter":"8 Piecewise linear regressions","heading":"8.1.1 Dummy model","text":"model argument used code dummy variable. dummy variable used compute slope level effects phase variable.\nphase variable categorical, identifying phase measurement. Typically, categorical variables implemented means dummy variables. piecewise regression model two phase effects estimated: level effect slope effect. level effect implemented quite straight forward: phase beginning second phase new dummy variable created values zero measurements except measurements phase focus values one set.estimating slope effect phase, another kind dummy variables created. Like dummy variables level effects values set zero measurements except ones phase focus. , values start increase every measurement end phase.\nVarious suggestions made regarding way values increase. B&L-B model starts one first measurement phase increases every measurement H-M model starts zero.Applying H-M model give “pure” level-effect B&L-B model provide estimation level-effect actually level-effect plus times slope-effect (model assumes slope variable 1 first measurement B-phase). studies, H-M model appropriate.Still, aware another aspect. Usually, measurement-times single-case designs coded starting 1 increasing integers (e.g., 1, 2, 3, …). time, estimation trend-effect based measurement-time variable. case, estimation model intercept (usually interpreted value start study) actually depicts estimation start value plus one times trend-effect. Therefore, implemented W model (since scan version 0.54.4). , trend-effect estimated measurement-time variable starts 0. result intercept represent estimated value first measurement fo study. W model handles slope estimation way H-M model. Since scan version 0.54.4 W model default.","code":""},{"path":"piecewise-linear-regressions.html","id":"designs-with-more-than-two-phases-setting-the-right-contrasts","chapter":"8 Piecewise linear regressions","heading":"8.1.2 Designs with more than two phases: Setting the right contrasts","text":"single-case studies two phases gets bit complicated. Applying afore described models three phases result comparison phase first phase (usually Phase). , regression weights significance tests depict differences phase values phase . might OK depending interested . Another usual application compare effects phase preceding one.\nSince scan version 0.54.4 plm allows set contrast argument. contrast = \"first\"` (default) compare slope level-effects values first phase. contrast = \"preceding\"` compare slope level-effects preceding phase. (Note: Prior scan version 0.54.4 set model = \"JW\" identical model = \"B&L-B\", contrast = \"preceding\"`).preceding contrast, dummy variable level-effect set zero phases preceding phase focus set one remaining measurements. Similar, dummy variable slope-effect set zero phases preceding one focus starts one first measurement target phase increases last measurement case.","code":""},{"path":"piecewise-linear-regressions.html","id":"adjusting-the-model","chapter":"8 Piecewise linear regressions","heading":"8.1.3 Adjusting the model","text":"piecewise regression reveals significant level effect two non significant effects trend slope. analyses like put slope effect equation. several ways . easiest way set slope argument FALSE.resulting estimations trend level effects now significant. model estimated trend effect 1.01 points per measurement time level effect 10.33 points. , beginning intervention (B-phase) score increases 15.38 points (5 x 1.01 + 10.33).","code":"\nexample <- scdf(\n   values = c(55, 58, 53, 50, 52, 55, 68, 68, 81, 67, 78, 73, 72, 78, 81, 78, 71, 85, 80, 76),\n   phase_design = c(A = 5, B = 15)\n)\n\nplm(example)Piecewise Regression Analysis\n\nDummy model: W first\n\nFitted a gaussian distribution.\nF(3, 16) = 21.36; p = 0.000; R² = 0.800; Adjusted R² = 0.763\n\n                   B   2.5%  97.5%    SE      t     p delta R²\nIntercept     56.400 48.070 64.730 4.250 13.270 0.000         \nTrend mt      -1.400 -4.801  2.001 1.735 -0.807 0.432   0.0081\nLevel phase B 16.967  4.510 29.424 6.356  2.670 0.017   0.0890\nSlope phase B  2.500 -0.961  5.961 1.766  1.416 0.176   0.0250\n\nAutocorrelations of the residuals\n lag    cr\n   1 -0.28\n   2  0.05\n   3 -0.11\n\nFormula: values ~ 1 + mt + phaseB + interB\nplm(example, slope = FALSE)Piecewise Regression Analysis\n\nDummy model: W first\n\nFitted a gaussian distribution.\nF(2, 17) = 29.30; p = 0.000; R² = 0.775; Adjusted R² = 0.749\n\n                   B   2.5%  97.5%    SE      t     p delta R²\nIntercept     51.572 46.455 56.690 2.611 19.752 0.000         \nTrend mt       1.014  0.364  1.664 0.332  3.057 0.007   0.1236\nLevel phase B 10.329  1.674 18.983 4.416  2.339 0.032   0.0724\n\nAutocorrelations of the residuals\n lag    cr\n   1 -0.07\n   2  0.06\n   3 -0.17\n\nFormula: values ~ 1 + mt + phaseB"},{"path":"piecewise-linear-regressions.html","id":"adding-additional-predictors","chapter":"8 Piecewise linear regressions","heading":"8.1.4 Adding additional predictors","text":"complex analyses additional predictors can included piecewise regression model., change regression formula ‘manually’ applying update argument. update argument allows change underlying regression formula. add new variable named example newVar, set update = .~. + newVar. .~. part takes internally build formula + newVar adds variable named newVar equation.formula two parts divided tilde. Left tilde variable predicted right predictors. 1 indicates intercept, variable mt estimates trend effect, phaseB level effect B-phase variable interB slope effect B-phase. formula explicitly defined set formula = values ~ 1 + mt + phaseB + interB (assuming AB-design) estimate full piecewise regression model.","code":"\nplm(exampleAB_add, update = .~. + cigarrets)Piecewise Regression Analysis\n\nDummy model: W first\n\nFitted a gaussian distribution.\nF(4, 35) = 5.87; p = 0.001; R² = 0.402; Adjusted R² = 0.333\n\n                            B   2.5%  97.5%    SE      t     p delta R²\nIntercept              48.971 43.387 54.555 2.849 17.189 0.000         \nTrend day               0.392 -0.221  1.005 0.313  1.253 0.218   0.0269\nLevel phase Medication  3.459 -3.382 10.301 3.490  0.991 0.328   0.0168\nSlope phase Medication -0.294 -0.972  0.384 0.346 -0.850 0.401   0.0124\ncigarrets              -0.221 -1.197  0.755 0.498 -0.443 0.660   0.0034\n\nAutocorrelations of the residuals\n lag    cr\n   1  0.20\n   2 -0.19\n   3 -0.16\n\nFormula: wellbeing ~ day + phaseMedication + interMedication + cigarrets"},{"path":"piecewise-linear-regressions.html","id":"to-be-written-modelling-autoregression","chapter":"8 Piecewise linear regressions","heading":"8.1.5 \\[to be written\\] Modelling autoregression","text":"","code":"\nautocorr(Grosche2011)Autocorrelations\n\nEva \n Phase Lag 1 Lag 2 Lag 3\n     A -0.04 -0.56 -0.01\n     B  0.46  0.10  0.16\n   all  0.48  0.13  0.24\n\nGeorg \n Phase Lag 1 Lag 2 Lag 3\n     A  0.51 -0.01 -0.13\n     B -0.01 -0.02 -0.14\n   all  0.40  0.15 -0.12\n\nOlaf \n Phase Lag 1 Lag 2 Lag 3\n     A  0.64  0.29 -0.24\n     B -0.45 -0.20  0.16\n   all  0.35  0.12 -0.09"},{"path":"piecewise-linear-regressions.html","id":"to-be-written-multivariate-piecewise-regression","chapter":"8 Piecewise linear regressions","heading":"8.2 \\[to be written\\] Multivariate piecewise regression","text":"","code":"\nmplm(exampleAB_add, dvar = c(\"wellbeing\", \"depression\"))Multivariate piecewise linear model\n\nDummy model: W first\n\nCoefficients: \n                       wellbeing depression\n(Intercept)               48.417      4.200\nday                        0.379      0.114\nLevel Phase Medication     3.588     -0.945\nSlope Phase Medication    -0.275     -0.165\n\nFormula: y ~ 1 + day + phaseMedication + interMedication\n\nType III MANOVA Tests: Pillai test statistic\n                       Df test stat approx F num Df den Df Pr(>F)    \n(Intercept)             1     0.915    188.9      2     35 <2e-16 ***\nday                     1     0.055      1.0      2     35   0.38    \nLevel Phase Medication  1     0.033      0.6      2     35   0.56    \nSlope Phase Medication  1     0.039      0.7      2     35   0.50    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThe following variables were used in this analysis:\n'wellbeing/ depression' as dependent variable, 'phase' as phase variable, and 'day' as measurement-time variable."},{"path":"piecewise-linear-regressions.html","id":"multilevel-plm-analyses","chapter":"8 Piecewise linear regressions","heading":"8.3 Multilevel plm analyses","text":"Multilevel analyses can take piecewise-regression approach even . allows foranalyzing effects phases multiple single-cases oncedescribing variability subjects regarding effects, andintroducing variables factors explaining differences.basic function applying multilevel piecewise regression analysis hplm. hplm function similar plm function, recommend get familar plm applying hplm.simple example:example inlcuding random slopes:","code":"\nhplm(exampleAB_50)Hierarchical Piecewise Linear Regression\n\nEstimation method ML \nDummy model: W first\n50 Cases\n\nICC = 0.287; L = 339.0; p = 0.000\n\nFixed effects (values ~ 1 + mt + phaseB + interB)\n\n                   B    SE   df      t p\nIntercept     48.398 1.484 1328 32.611 0\nTrend mt       0.579 0.116 1328  5.006 0\nLevel phase B 14.038 0.655 1328 21.436 0\nSlope phase B  0.902 0.119 1328  7.588 0\n\nRandom effects (~1 | case)\n\n          EstimateSD\nIntercept      9.970\nResidual       5.285\nhplm(exampleAB_50, random.slopes = TRUE)Hierarchical Piecewise Linear Regression\n\nEstimation method ML \nDummy model: W first\n50 Cases\n\nICC = 0.287; L = 339.0; p = 0.000\n\nFixed effects (values ~ 1 + mt + phaseB + interB)\n\n                   B    SE   df      t p\nIntercept     48.211 1.398 1328 34.497 0\nTrend mt       0.621 0.113 1328  5.516 0\nLevel phase B 13.872 0.894 1328 15.513 0\nSlope phase B  0.864 0.116 1328  7.433 0\n\nRandom effects (~1 + mt + phaseB + interB | case)\n\n              EstimateSD\nIntercept          9.352\nTrend mt           0.096\nLevel phase B      4.537\nSlope phase B      0.126\nResidual           4.974"},{"path":"piecewise-linear-regressions.html","id":"adding-additional-l2-variables-add-l2","chapter":"8 Piecewise linear regressions","heading":"8.3.1 Adding additional L2-variables {add-l2}","text":"analyses researchers want investigate whether attributes individuals contribute effectiveness intervention. example might intervention mathematical abilities less effective student migration background due much language related material within training. analyses can also conducted scan. Therefore, need define new data frame including relevant information subjects single-case studies want analyze. data frame consists variable labeled case correspond case names scfd variables attributes subjects. build data frame can use R function data.frame.Multilevel analyses require high number Level 2 units. exact number depends complexity analyses, size effects, number level 1 units, variability residuals. surely need least 30 level 2 units. single-case design , need least 30 single-cases (subjects) within study. setting level 2 data frame can merge scdf add_l2()` function (alternatively, can use data.l2 argument hplm function). specify regression function using update.fixed argument. level 2 variables can added just like additional variable. example, added level 2 data-set two variables sex age. update construed level 1 piecewise regression model .~. plus additional level 2 variables interest + sex + age. complete argument update.fixed = .~. + sex + age. analyses estimate main effect sex age overall performance. case want analyze interaction intervention effects example sex subject add additional interaction term (cross-level interaction). interaction defined colon. sex:phase indicates interaction sex level effect single case study. complete formula now update.fixed = .~. + sex + age + sex:phase.scan includes example single-case study 50 subjects example50 additional level 2 data-set example50.l2. first 10 cases example50.l2.Analyzing data hplm look like :sex factor levels f m. sexm effect male overall performance. age seem effect. drop age equation add interaction sex phase see whether sex effect due weaker impact intervention males.Now interaction phase:sexm significant main effect longer relevant. looks like intervention effect \\(7.7\\) points lower male subjects. level-effect \\(17.7\\) points female subjects \\(17.7\\) - \\(7.7\\) = \\(10\\) males.","code":"\nL2 <- data.frame(\n  case = c(\"Antonia\",\"Theresa\", \"Charlotte\", \"Luis\", \"Bennett\", \"Marie\"), \n  age = c(16, 13, 13, 10, 5, 14), \n  sex = c(\"f\",\"f\",\"f\",\"m\",\"m\",\"f\")\n)\nL2       case age sex\n1   Antonia  16   f\n2   Theresa  13   f\n3 Charlotte  13   f\n4      Luis  10   m\n5   Bennett   5   m\n6     Marie  14   f\nexampleAB_50 %>%\n  add_l2(exampleAB_50.l2) %>%\n  hplm(update.fixed = .~. + sex + age)Hierarchical Piecewise Linear Regression\n\nEstimation method ML \nDummy model: W first\n50 Cases\n\nICC = 0.287; L = 339.0; p = 0.000\n\nFixed effects (values ~ mt + phaseB + interB + sex + age)\n\n                   B     SE   df      t     p\nIntercept     44.878 11.926 1328  3.763 0.000\nTrend mt       0.581  0.116 1328  5.026 0.000\nLevel phase B 14.023  0.655 1328 21.405 0.000\nSlope phase B  0.900  0.119 1328  7.569 0.000\nsexm          -6.440  2.727   47 -2.362 0.022\nage            0.603  1.073   47  0.562 0.577\n\nRandom effects (~1 | case)\n\n          EstimateSD\nIntercept      9.446\nResidual       5.284\n# Alternatively:\n# hplm(exampleAB_50, data.l2 = exampleAB_50.l2, update.fixed = .~. + sex + age)\nexampleAB_50 %>%\n  add_l2(exampleAB_50.l2) %>%\n  hplm(update.fixed = .~. + sex + sex:phaseB)Hierarchical Piecewise Linear Regression\n\nEstimation method ML \nDummy model: W first\n50 Cases\n\nICC = 0.287; L = 339.0; p = 0.000\n\nFixed effects (values ~ mt + phaseB + interB + sex + phaseB:sex)\n\n                        B    SE   df       t    p\nIntercept          48.573 1.968 1327  24.676 0.00\nTrend mt            0.609 0.109 1327   5.573 0.00\nLevel phase B      17.726 0.684 1327  25.922 0.00\nSlope phase B       0.884 0.112 1327   7.868 0.00\nsexm               -0.593 2.741   48  -0.216 0.83\nLevel phase B:sexm -7.732 0.609 1327 -12.699 0.00\n\nRandom effects (~1 | case)\n\n          EstimateSD\nIntercept      9.494\nResidual       4.989"},{"path":"randomization-tests.html","id":"randomization-tests","chapter":"9 Randomization tests","heading":"9 Randomization tests","text":"rand_test function computes randomization test single multiple baseline single-case data. function based algorithm SCRT package (Bulte & Onghena, 2009, 2012), rewritten extended use AB designs.statsitics argument defines statistic comparison phases based . following comparisons possible:“Mean -B”: Uses difference mean phase mean phase B. * appropriate decrease scores expected phase B.“Mean B-”: Uses difference mean phase B mean phase . appropriate increase scores expected phase B.“Mean |-B|”: Uses absolute value difference means phases B.“Median -B”: “Mean -B”, based median.“Median B-”: “Mean B-”, based median.number\nSample size randomization distribution. exactness p-value can exceed 1/number (.e., number = 100 results p-values exactness one percent). Default number = 500. faster processing use number = 100. precise p-values set number = 1000.complete\nTRUE, distribution based complete permutation possible starting combinations. setting overwrites number Argument. default setting FALSE.limit\nMinimal number data points per phase sample. first number refers -phase second B-phase (e.g., limit = c(5, 3)). one number given, number applied phases. Default limit = 5.startpoints\nAlternative limit-parameter, startpoints exactly defines possible start points phase B (e.g., startpoints = 4:9 restricts phase B start points measurements 4 9. startpoints overwrite limit-parameter.exclude.equal\nset FALSE, default, random distribution values equal observed distribution counted null-hypothesis conform. , decrease probability rejecting null-hypothesis (increase p-value). exclude.equal set TRUE analyse one single-case design (multiple baseline data set) reach sufficient power. aware, increases chance alpha-error.graph\nset TRUE, histogram resulting distribution plotted.phases\nvector two characters numbers indicating two phases compared. E.g., phases = c(“”,“C”) phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(“”,“B”).","code":"\nrand_test(exampleAB, graph = TRUE)Randomization Test\n\nTest for 3 cases.\n\nComparing phase A against phase B \nStatistic:  Mean B-A \n\nMinimal length of each phase: A = 5 , B = 5 \nObserved statistic =  20.55556 \n\nDistribution based on a random sample of all 1331 possible combinations.\nn   =  500 \nM   =  18.58539 \nSD  =  1.118411 \nMin =  16.05185 \nMax =  21.34493 \n\nProbability of observed statistic based on distribution:\np   =  0.036 \n\nShapiro-Wilk Normality Test: W = 0.980; p = 0.000  (Hypothesis of normality rejected)\n\nProbabilty of observed statistic based on the assumption of normality:\nz = 1.7616, p = 0.0391 (single sided)"},{"path":"power-analyses-scan-version-0.54-or-later.html","id":"power-analyses-scan-version-0.54-or-later","chapter":"10 Power analyses (scan version 0.54 or later)","heading":"10 Power analyses (scan version 0.54 or later)","text":"","code":""},{"path":"power-analyses-scan-version-0.54-or-later.html","id":"the-idea-of-a-power-test","chapter":"10 Power analyses (scan version 0.54 or later)","heading":"10.1 The idea of a power-test","text":"powert_test() function provides alpha error probability power analyzing specific effect single-case design given statistical method.example, one case design phase length = 10 B = 20. assume strong level effect d = 1 expect slight trend effect d = 0.02 (per measurement). might interested answer two questions:suitable plm model detecting level-effect? (also: power detect level effect?).design without level-effect. often plm falsely find significant level-effect? (also: large alpha-error probability level-effect?).principle, power_test() takes single case design repeatedly generates random cases based design. case now analyzed given statistical method. proportion significant effects analyses estimator test-power. second step design stripped target effect multiple cases generated changed design analyzed method. Now, proportion significant effects estimator alpha-error probability.","code":""},{"path":"power-analyses-scan-version-0.54-or-later.html","id":"set-up-a-single-case-design","chapter":"10 Power analyses (scan version 0.54 or later)","heading":"10.2 Set up a single-case design","text":"design function sets single-case design. can define various parameters design:\nTable 10.1: Core arguments design function\n","code":""},{"path":"power-analyses-scan-version-0.54-or-later.html","id":"conducting-a-power-test","chapter":"10 Power analyses (scan version 0.54 or later)","heading":"10.3 Conducting a power-test","text":"conduction power test, firstly need define design like tested.choose statistical method. power_test function applies three methods default: plm, randomization test, Tau U. default values suitable design one case single-case study.Let us start defaults conduct power analysis previously set design: (might take time. Even default setting 100 simulations might wait seconds. precise estimations recommend 1000 simulations - even higher.)results show plm test randomization test similar power alpha-error probabilities (differences may due outliers random samples. intensive computation 1000 simulations shows slightly better values plm). tau U test unacceptably high alpha-error due trend put design. Alpha:Beta depicts relation Alpha Beta error (power = 1 - Beta). Correct overall proportion correct categorizations p results binomial-test Correct 50%.","code":"\ndesign <- design(\n  n = 1,\n  phase_design = list(A = 10, B = 20),\n  level = list(A = 0, B = 1),\n  trend = 0.02,\n  distribution = \"normal\"\n)\nres <- power_test(design)\nresTest-Power in percent:\n\n    Method Power Alpha Error Alpha:Beta Correct\n plm_level    73           5      1:5.4      84\n      rand    67          10      1:3.3      78\n      tauU   100          25      1:0.0      88"},{"path":"power-analyses-scan-version-0.54-or-later.html","id":"statistical-methods","chapter":"10 Power analyses (scan version 0.54 or later)","heading":"10.4 Statistical methods","text":"method argument takes list element depicts statistical method. Currently, following character strings predefined:\nTable 10.2: Statistical methods\n","code":""},{"path":"power-analyses-scan-version-0.54-or-later.html","id":"confidence-intervals-and-binomial-tests","chapter":"10 Power analyses (scan version 0.54 or later)","heading":"10.5 Confidence intervals and binomial tests","text":"100 simulations quite large confidence intervals power, alpha error probability, correct estimations. can calculate intervals setting ci argument. 95% CI’s set ci = 0.95 99% ci = 0.99.can also test power, alpha error, correct estimates predefined values. order , set binom_test = TRUE. power tested greater equal 80%, alpha error less equal 5%, correct proportion greater equal 87.5%.want define individual values three tests, set binom_test_power. binom_test_alpha, /, binom_test_correct arguments.","code":"\npower_test(design, ci = 0.95)Test-Power in percent:\n\n    Method Power 2.5% 97.5% Alpha Error 2.5% 97.5% Alpha:Beta Correct 2.5%\n plm_level    77   68    85           5    2    11      1:4.6      86   80\n      rand    68   58    77           8    4    15      1:4.0      80   74\n      tauU   100   96   100          28   19    38      1:0.0      86   80\n 97.5%\n    90\n    85\n    90\npower_test(design, binom_test = TRUE)Test-Power in percent:\n\n    Method Power Alpha Error Alpha:Beta Correct p Power>=80 p Alpha Error<=5\n plm_level    76           4      1:6.0      86           1                0\n      rand    74           6      1:4.3      84           1                1\n      tauU   100          22      1:0.0      89           0                1\n p Correct>=87.5\n             0.8\n             0.9\n             0.3"},{"path":"power-analyses-scan-version-0.54-or-later.html","id":"advanced-methods","chapter":"10 Power analyses (scan version 0.54 or later)","heading":"10.6 Advanced methods","text":"Note: need specific knowledge create functions R data structures follow aspects section.Instead one predefined character strings can also create functions implement . function must take scdf first argument return single numeric p-value.example implements method significance NAP (nonoverlap pairs) test. statistically identical U-Test comparing phase B.another example fast plm function poisson distributed data based fastglm package:","code":"\nset.seed(1) # only needed to make this example replicable\n\nmcmethod_nap <- function(scdf) {\n  nap(scdf)$nap[1, \"p\"]\n}\n\npower_test(design, method = list(nap = mcmethod_nap, \"rand\", \"plm_level\"))Test-Power in percent:\n\n    Method Power Alpha Error Alpha:Beta Correct\n       nap   100          47      1:0.0      76\n      rand    73           5      1:5.4      84\n plm_level    73           3      1:9.0      85\nplm_fast <- function(data) {\n  data <- unlist(data, recursive = FALSE)\n  y  <- data$values\n  n1 <- sum(data$phase == \"A\")\n  n2 <- sum(data$phase == \"B\")\n  D <- c(rep(0, n1), rep(1, n2))\n  mt <- data$mt\n  inter <- (mt - mt[n1]) * D\n  x <- matrix(\n    c(rep(1, n1 + n2), mt, D, inter),\n    nrow = n1 + n2,\n    ncol = 4\n  )\n  full <- fastglm::fastglm(x = x, y = y, family = \"poisson\", method = 2)\n  summary(full)$coef[3, 4]\n}\npower_test(design, method = list(\"fast plm\" = plm_fast))"},{"path":"power-analyses-scan-version-0.54-or-later.html","id":"computation-duration","chapter":"10 Power analyses (scan version 0.54 or later)","heading":"10.7 Computation duration","text":"can print returning object power_test function added computation duration time setting duration = TRUEThe duration depends heavily applied test methods. Regressions faster randomization tests tau U tests quiet slow:… new fast-glm function?… much faster!","code":"\nprint(res, duration = TRUE)Test-Power in percent:\n\n    Method Power Alpha Error Alpha:Beta Correct\n plm_level    73           5      1:5.4      84\n      rand    67          10      1:3.3      78\n      tauU   100          25      1:0.0      88\n\nComputation duration is 1.8 seconds.\nres1 <- power_test(design, method = \"plm_level\")\nres2 <- power_test(design, method = \"rand\")\nres3 <- power_test(design, method = \"tauU\")\n\n# Elapsed time in seconds for each procedure\nattr(res1, \"computation_duration\")[3]\nelapsed \n   0.14 \nattr(res2, \"computation_duration\")[3]\nelapsed \n   0.37 \nattr(res3, \"computation_duration\")[3]\nelapsed \n  1.209 \nset.seed(1)\ndesign <- design(\n  n = 1,\n  phase_design = list(A = 10, B = 20),\n  level = list(A = 0, B = 1),\n  trend = 0.02,\n  distribution = \"poisson\"\n)\n\nres1 <- power_test(design, method = list(\"fast plm\" = plm_fast))\nres2 <- power_test(design, method = \"plm_poisson_level\")\n\nattr(res1, \"computation_duration\")[3]elapsed \n  0.212 \nattr(res2, \"computation_duration\")[3]elapsed \n  0.237 "},{"path":"default-settings.html","id":"default-settings","chapter":"11 Default settings","heading":"11 Default settings","text":"default settings scan can changed options() argument. Table 11.1 shows complete list options default values.\nTable 11.1: Scan Options\n","code":"\n# get the current value of an option\ngetOption(\"scan.print.rows\")[1] 15\n# set option to a different value\noptions(scan.print.rows = 5, scan.print.scdf.name = FALSE)\nprint(exampleAB)#A single-case data frame with 3 cases\n\n values mt phase ｜ values mt phase ｜ values mt phase ｜\n     54  1     A ｜     41  1     A ｜     55  1     A ｜\n     53  2     A ｜     59  2     A ｜     58  2     A ｜\n     56  3     A ｜     56  3     A ｜     53  3     A ｜\n     58  4     A ｜     51  4     A ｜     50  4     A ｜\n     52  5     A ｜     52  5     A ｜     52  5     A ｜\n# ... up to 15 more rows\noptions(scan.print.rows = 15, scan.print.scdf.name = TRUE)\nprint(exampleAB)#A single-case data frame with 3 cases\n\n Johanna: values mt phase ｜ Karolina: values mt phase ｜ Anja: values mt phase\n              54  1     A ｜               41  1     A ｜           55  1     A\n              53  2     A ｜               59  2     A ｜           58  2     A\n              56  3     A ｜               56  3     A ｜           53  3     A\n              58  4     A ｜               51  4     A ｜           50  4     A\n              52  5     A ｜               52  5     A ｜           52  5     A\n              61  6     B ｜               57  6     B ｜           55  6     B\n              62  7     B ｜               56  7     B ｜           68  7     B\n              71  8     B ｜               67  8     B ｜           68  8     B\n              66  9     B ｜               75  9     B ｜           81  9     B\n              64 10     B ｜               66 10     B ｜           67 10     B\n              78 11     B ｜               69 11     B ｜           78 11     B\n              70 12     B ｜               68 12     B ｜           73 12     B\n              74 13     B ｜               73 13     B ｜           72 13     B\n              82 14     B ｜               77 14     B ｜           78 14     B\n              77 15     B ｜               79 15     B ｜           81 15     B\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n ｜\n# ... up to 5 more rows"},{"path":"example-datasets.html","id":"example-datasets","chapter":"12 Example datasets","heading":"12 Example datasets","text":"\nTable 12.1: Scan Options\n","code":""},{"path":"exporting-scan-results.html","id":"exporting-scan-results","chapter":"13 Exporting scan results","heading":"13 Exporting scan results","text":"export function make easier convert results scan analyses tables descriptions can add documents presentations. Basically, export takes scan object converts html-table latex output.\nexport build top knitr \nkableextra packages. list provided \nkable_options argument implemented \nkable function knitr list provided\nkable_styling_options implemented \nkable_styling command kableExtra\npackage. export sets defaults functions \ncan play around overwrite .\nexport works best used within rmarkdown file /within RStudio.\nRStudio[xxx continued!]","code":""},{"path":"exporting-scan-results.html","id":"single-case-data-files","chapter":"13 Exporting scan results","heading":"13.1 Single case data files","text":"\nTable 13.1: Single case data frame 3 cases\n","code":"\nexport(exampleA1B1A2B2_zvt)"},{"path":"exporting-scan-results.html","id":"descriptive-stats","chapter":"13 Exporting scan results","heading":"13.2 Descriptive stats","text":"\nTable 13.2: Descriptive statistics\n","code":"\nres <- describe(GruenkeWilbert2014)\nexport(res)"},{"path":"exporting-scan-results.html","id":"overlap-indices","chapter":"13 Exporting scan results","heading":"13.3 Overlap indices","text":"\nTable 13.3: Overlap indices. Comparing phase 1 phase 2\n","code":"\nexampleA1B1A2B2_zvt %>%\n  select_phases(A = c(1,3), B = c(2,4)) %>%\n  overlap() %>%\n  export(flip = TRUE)"},{"path":"exporting-scan-results.html","id":"piecewise-linear-models","chapter":"13 Exporting scan results","heading":"13.4 Piecewise linear models","text":"\nTable 13.4: Piecewise-regression model predicting variable ‘values’\n","code":"\nres <- plm(exampleA1B1A2B2$Pawel)\nexport(res)"},{"path":"exporting-scan-results.html","id":"hierarchical-piecewise-regressions","chapter":"13 Exporting scan results","heading":"13.5 Hierarchical piecewise regressions","text":"\nTable 13.5: Hierarchical Piecewise Linear Regression predicting variable ‘values’\n","code":"\nexampleAB_50 %>%\n  add_l2(exampleAB_50.l2) %>%\n  hplm(lr.test = TRUE, random.slopes = TRUE) %>%\n  export()"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"scplot---adavanced-plotting-functions-for-single-case-data","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14 scplot - Adavanced plotting functions for single-case data","text":"started developing new add-package scanfor visualizing single-case data: scplot. function gradually replace plot.scdf() (short: plot()) function already included scan finally included scan package.\nadvantages using scplot standard scan plot function:scplot already much versatile plot .scplot designed encompass pipe style coding much cleaner, intelligible easier code.scplot based ggplot2 produces ggplot2 object can modified extended wishes.consider state scplot experimental. , code syntax might change future versions backward compatibility guaranteed.keep “old” plot.scdf future versions scan.plots generated scplot demonstrate possibilities.","code":""},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"install-scplot","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.1 Install scplot","text":"scplot hosted gitHub project https://github.com/jazznbass/scplot.\ncan install devtools::install_github(\"jazznbass/scplot\", dependencies = TRUE) R console.\nMake sure package devtools installed .\npackage compiled. running R Windows machine also install Rtools. Rtools R package can downloaded CRAN https://cran.r-project.org/bin/windows/Rtools/. MacOs Linux users usually need take extra step.","code":""},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"basic-principal","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.2 Basic principal","text":"start providing scdf object (single-case data frame returned scdf() function scan) scplot() function (e.g. scplot(exampleAB)). Now use series pipe-operators (%>%) add change characteristics resulting plot. example:","code":"\nscplot(exampleABC) %>%\n  add_title(\"My plot\") %>%\n  add_caption(\"Note: A nice plot\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"the-standard-style","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.3 The standard style","text":"","code":"\nscplot(exampleAB)"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-datalines","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.4 Add datalines","text":"","code":"\nscplot(exampleAB_add) %>%\n  add_dataline(\"depression\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-statlines","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.5 Add statlines","text":"","code":""},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"lines-indicating-a-constant-for-each-phase","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.5.1 Lines indicating a constant for each phase","text":"Possible functions: mean, min, max, quantile","code":"\nscplot(exampleABC) %>%\n  add_statline(\"mean\", color = \"darkred\") %>%\n  add_statline(\"max\", color = \"darkblue\", linetype = \"dashed\") %>%\n  add_statline(\"min\", color = \"brown\", linetype = \"dashed\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"lines-indicating-a-constant-for-a-specific-phase","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.5.2 Lines indicating a constant for a specific phase","text":"Set phase argument one multiple phase-names phase-numbersPossible functions: mean, min, max, quantile","code":"\nscplot(exampleABC) %>%\n  add_statline(\"mean\", phase = \"A\", color = \"darkred\") %>%\n  add_statline(\"max\", phase = c(\"B\", \"C\"), color = \"darkblue\", linetype = \"dashed\") %>%\n  add_statline(\"min\", phase = c(2, 3), color = \"orange\", linetype = \"dashed\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"trend-lines","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.5.3 Trend-lines","text":"trend (separate trend-line phase), trendA (extrapolated trend-line first phase):","code":"\nscplot(exampleABC) %>%\n  add_statline(\"trend\", color = \"darkred\") %>%\n  add_statline(\"trendA\", color = \"darkblue\", linetype = \"dashed\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"smoothed-curves","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.5.4 Smoothed curves","text":"Possible functions: movingMean, movingMedian, loess, lowess:","code":"\nscplot(exampleABC) %>%\n  add_statline(\"loess\", color = \"darkred\") %>%\n  add_statline(\"movingMean\", color = \"darkblue\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"refine-with-addidtional-arguments","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.5.5 Refine with addidtional arguments","text":"mean : trimquantile: probsmovingMean, movingMedian: lagloess: spanlowess: f","code":"\nscplot(exampleABC) %>%\n  add_statline(\"movingMean\", lag = 1, color = \"darkblue\") %>%\n  add_statline(\"quantile\", probs = 0.75, color = \"darkred\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"specify-data-line","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.5.6 Specify data-line","text":"specify variable argument default first data-line addressed.","code":"\nscplot(exampleAB_add) %>%\n  add_dataline(\"cigarrets\") %>%\n  add_statline(\"mean\", variable = \"cigarrets\", color = \"darkred\") %>%\n  add_statline(\"trend\", linetype = \"dashed\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"annotate-and-mark","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.6 Annotate and mark","text":"","code":""},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-marks","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.6.1 Add marks","text":"positions argument can take numeric vector:positions argument can also string containing logical expression. evaluated respective positions marked.positions argument can take results scan outlier analyses mark positions outliers case:","code":"\nscplot(exampleABC) %>%\n  add_marks(case = 1, positions = c(7, 12)) %>%\n  add_marks(case = 3, positions = c(3, 17), color = \"blue\", size = 7)\nscplot(exampleABC) %>%\n  add_marks(case = 1, positions = \"mt > 15\") %>%\n  add_marks(case = 2, positions = 'phase == \"B\"', color = \"green\", size = 5) %>%\n  add_marks(case = 3, positions = \"values > quantile(values, probs = 0.80)\", color = \"blue\", size = 7) %>%\n  add_marks(case = \"all\", positions = \"values < quantile(values, probs = 0.20)\", color = \"yellow\", size = 7) %>%\n  add_caption(\"Note.\nred: mt > 15 in case 1; \ngreen: phase 'B' in case 2; \nblue: values > 80% quantile of case 3; \nyellow: values < 20% quantile of all cases\")\nscplot(exampleABC_outlier) %>% \n  add_marks(positions = outlier(exampleABC_outlier), size = 3)"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-text","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.6.2 Add text","text":"","code":"\nscplot(exampleABC) %>%\n  add_text(\"Here!\", case = 2, x = 10, y = 80, color = \"red\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-arrow","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.6.3 Add arrow","text":"","code":"\nscplot(exampleABC) %>%\n  add_arrow(case = 1, x0 = 6, y0 = 90, x1 = 3, y1 = 63) %>%\n  add_text(\"Problem\", case = 1, x = 6, y = 94, color = \"red\", size = 1, hjust = 0 ) "},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"change-appearance-of-basic-plot-elements","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.7 Change appearance of basic plot elements","text":"","code":""},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"data-line","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.7.1 Data line","text":"","code":"\nscplot(exampleABC) %>%\n  set_dataline(colour = \"blue\", size = 1, linetype = \"dotted\", \n               point = list(colour = \"red\", size = 1, shape = 2) )\n# Equivalent_\n# scplot(exampleABC) %>%\n#   set_dataline(line = list(colour = \"blue\", size = 1, linetype = \"dotted\"), \n#                point = list(colour = \"red\", size = 1, shape = 2)) "},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"background","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.7.2 Background","text":"","code":"\nscplot(exampleABC) %>%\n  set_background(fill = \"grey90\", color = \"black\", size = 2)"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"panel","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.7.3 Panel","text":"","code":"\nscplot(exampleABC) %>%\n  set_panel(fill = \"tan1\", color = \"palevioletred\", size = 2)"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"a-different-panel-color-for-each-phase","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.7.4 A different panel color for each phase","text":"Note: colors 50% transparent. might appear different.","code":"\nscplot(exampleABC) %>%\n  set_panel(fill = c(\"grey80\", \"white\", \"blue4\"))"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"themes","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.8 Themes","text":"Themes complete styles define various elements plot.Function add_theme(\"theme_name\")Possible themes:basic, grid, default, small, tiny, big, minimal, dark, sienna, phase_color, phase_shade, grid2","code":""},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"the-default-theme","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.8.1 The ‘default’ theme","text":"","code":"\nscplot(exampleABC)"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"theme-basic","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.8.2 Theme ‘basic’","text":"","code":"\nscplot(exampleABC) %>%\n  add_theme(\"basic\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"theme-minimal","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.8.3 Theme ‘minimal’","text":"","code":"\nscplot(exampleABC) %>%\n  add_theme(\"minimal\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"theme-dark","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.8.4 Theme ‘dark’","text":"","code":"\nscplot(exampleABC) %>%\n  add_theme(\"dark\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"theme-sienna","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.8.5 Theme ‘sienna’","text":"","code":"\nscplot(exampleABC) %>%\n  add_theme(\"sienna\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"combine-themes","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.8.6 Combine themes","text":"providing multiple themes order important latter overwrites styles former.","code":"\nscplot(exampleABC) %>%\n  add_theme(\"sienna\", \"minimal\", \"small\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"set-base-text","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.8.7 Set base text","text":"base text size absolute size. text sizes relative base text size.","code":"\nscplot(exampleAB_decreasing$Peter) %>%\n  set_base_text(colour = \"blue\", family = \"serif\", face = \"italic\", size = 14)"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-title-and-caption","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.9 Add title and caption","text":"","code":"\nscplot(exampleAB_decreasing) %>%\n  add_title(\"A new plot\", color = \"darkblue\", size = 1.3) %>%\n  add_caption(\"Note. What a nice plot!\", face = \"italic\", colour = \"darkred\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-a-legend","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.10 Add a legend","text":"set specific elements","code":"\nscplot(exampleABC) %>%\n  add_statline(\"mean\", color = \"darkred\") %>%\n  add_statline(\"min\", phase = \"B\", size = 0.2, color = \"darkblue\") %>%\n  add_legend()\nscplot(exampleABC) %>%\n  add_statline(\"mean\", color = \"darkred\") %>%\n  add_legend(\n    position = \"left\", \n    title = list(size = 12, face = \"italic\"),\n    background = list(fill = \"grey95\", colour = \"black\")\n  )"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"customize-axis-settings","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.11 Customize axis settings","text":"axis ticks close together set increment argument leave additional space (e.g. increment = 2 annotate every value).\nset increment_from = 0 additional tick set 1 although counting increments start 0.","code":"\nscplot(exampleA1B1A2B2) %>% \n  set_xaxis(increment_from = 0, increment = 5, \n            color = \"darkred\", size = 0.7, angle = -90) %>%\n  set_yaxis(limits = c(0, 50), size = 0.7, color = \"darkred\") "},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"customize-axis-labels","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.12 Customize axis labels","text":"","code":"\nscplot(exampleA1B1A2B2) %>% \n  set_ylabel(\"Score\", color = \"darkred\", angle = 0) %>%\n  set_xlabel(\"Session\", color = \"darkred\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"change-casenames","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.13 Change Casenames","text":"Casenames strips:","code":"\nscplot(exampleA1B1A2B2) %>%\n  set_casenames(c(\"A\", \"B\", \"C\"), color = \"darkblue\", size = 1)\nscplot(exampleA1B1A2B2) %>%\n  set_casenames(position = \"strip\", \n                background = list(fill = \"lightblue\"))"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-value-labels","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.14 Add value labels","text":"set nudge_y argument 0, label set -top datapoints:","code":"\nscplot(exampleABC) %>% \n  add_labels(text = list(color = \"black\", size = 0.7), \n             background = list(fill = \"grey98\"), nudge_y = 7)Warning: Removed 1 rows containing missing values (geom_label).\nscplot(exampleABC) %>% \n  add_labels(text = list(color = \"black\", size = 0.7), \n             background = list(fill = \"grey98\"), nudge_y = 0)"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"add-a-ridge","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.15 Add a ridge","text":"","code":"\nscplot(exampleAB_mpd) %>% \n  add_ridge(\"grey50\")Warning in scan:::.prepare_scdf(scdf): Phase design is not identical for all\ncases."},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"extending-scplot-with-ggplot2","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.16 Extending scplot with ggplot2","text":"scplot() generates ggplot2 objects. can keep ggplot2 object assign new object as_ggplot() function. Thereby, can use many ggplot2 functions rework graphics:","code":"\np1 <- scplot(byHeart2011$`Lisa (Turkish)`) %>% \n        add_theme(\"minimal\") %>%\n        as_ggplot()\np2 <- scplot(byHeart2011$`Patrick (Spanish)`) %>% \n        add_theme(\"minimal\") %>% \n        as_ggplot()\np3 <- scplot(byHeart2011$`Anna (Twi)`) %>% \n        add_theme(\"minimal\") %>% \n        as_ggplot()\np4 <- scplot(byHeart2011$`Melanie (Swedish)`) %>% \n        add_theme(\"minimal\") %>% \n        as_ggplot()\n\nlibrary(patchwork)\np1 + p2 + p3 + p4 + plot_annotation(tag_levels = \"a\", tag_suffix =  \")\")"},{"path":"scplot---adavanced-plotting-functions-for-single-case-data.html","id":"complexs-examples","chapter":"14 scplot - Adavanced plotting functions for single-case data","heading":"14.17 Complexs examples","text":"complex examplesAdding bars bit complicated:Set type argument \"bar\"Extend limits x-axis 1 (0 41)Set left margin x-axis 0 expand argument.","code":"\nscplot(example_A24) %>% \n  add_theme(\"default\") %>%\n  add_statline(\"lowess\", color = \"darkred\", size = 1.5) %>%\n  add_statline(\"loess\", color = \"red\", size = 1.5) %>%\n  add_statline(\"movingMean\", lag = 3, color = \"lightpink\", size = 1.5) %>%\n  set_xaxis(size = 0.8, angle = 35) %>%\n  set_dataline(point = \"none\") %>%\n  add_legend(position = c(0.8, 0.75), background = list(color = \"grey50\")) %>%\n  set_phasenames(c(\"no speedlimit\", \"with speedlimit\"), position = \"left\", \n                 hjust = 0, vjust = 1) %>%\n  set_casenames(\"\") %>%\n  add_title(\"Effect of a speedlimit on the A24\") %>%\n  add_caption(\"Note: Moving mean calculated with lag three\", face = 3) %>%\n  add_ridge(color = \"lightblue\")\nscplot(exampleAB_add) %>%\n  add_dataline(\"cigarrets\", point = list(size = 1)) %>%\n  add_statline(\"trend\", linetype = \"dashed\") %>%\n  add_statline(\"mean\", variable = \"cigarrets\", color = \"darkred\") %>%\n  add_marks(positions = c(14,20), size = 3, variable = \"cigarrets\")%>%\n  add_marks(positions = \"cigarrets > quantile(cigarrets, 0.75)\", size = 3) %>%\n  set_xaxis(increment = 5) %>%\n  set_phasenames(color = NA) %>%\n  set_casenames(position = \"strip\") %>%\n  add_legend(\n    section_labels = c(\"\", \"\"),\n    labels = c(NA, NA, \"Trend of wellbeing\", \"Mean of cigarrets\"),\n    text = list(face = 3)\n  ) %>%\n  set_panel(fill = c(\"lightblue\", \"grey80\")) %>%\n  add_ridge(color = \"snow\", variable = \"cigarrets\") %>%\n  add_labels(variable = \"cigarrets\", nudge_y = 2, \n             text = list(color = \"blue\", size = 0.5)) %>%\n  add_labels(nudge_y = 2, text = list(color = \"black\", size = 0.5),\n             background = list(fill = \"white\"))Warning: Removed 1 rows containing missing values (geom_label).\nscplot(exampleA1B1A2B2) %>% \n  set_xaxis(increment = 4, color = \"brown\") %>%\n  set_yaxis(color = \"sienna3\") %>%\n  set_ylabel(\"Points\", color = \"sienna3\", angle = 0) %>%\n  set_xlabel(\"Weeks\", size = 1, color = \"brown\") %>%\n  add_title(\"Points by week\", color = \"sienna4\", face = 3) %>%\n  add_caption(\"Note: An extensive Example.\",\n              color = \"black\", size = 1, face = 3) %>%\n  set_phasenames(c(\"Baseline\", \"Intervention\", \"Fall-Back\", \"Intervention_2\"), \n                 size = 0) %>%\n  add_ridge(alpha(\"lightblue\", 0.5)) %>%\n  set_casenames(labels = sample_names(3), color = \"steelblue4\", size = 0.7) %>%\n  set_panel(fill = c(\"grey80\", \"grey95\"), color = \"sienna4\") %>%\n  add_grid(color = \"grey85\", size = 0.5) %>%\n  set_dataline(size = 0.5, linetype = \"solid\", \n               point = list(colour = \"sienna4\", size = 0.5, shape = 18)) %>%\n  add_labels(text = list(color = \"sienna\", size = 0.7), nudge_y = 4) %>%\n  set_separator(size = 0.5, linetype = \"solid\", color = \"sienna\") %>%\n  add_statline(stat = \"trendA\", color = \"tomato2\") %>%\n  add_statline(stat = \"max\", phase = c(1, 3), linetype = \"dashed\") %>%\n  add_marks(case = 1:2, positions = 14, color = \"red3\", size = 2, shape = 4) %>%\n  add_marks(case = \"all\", positions = \"values < quantile(values, 0.1)\", \n            color = \"blue3\", size = 1.5) %>%\n  add_marks(positions = outlier(exampleABAB), color = \"brown\", size = 2) %>%\n  add_text(case = 1, x = 5, y = 35, label = \"Interesting\", \n           color = \"darkgreen\", angle = 20, size = 0.7) %>%\n  add_arrow(case = 1, 5, 30, 5, 22, color = \"steelblue\") %>%\n  set_background(fill = \"white\") %>%\n  add_legend()Warning: Removed 6 rows containing missing values (geom_text).\nscplot(exampleAB_add) %>%\n  set_xaxis(expand = c(0, 0), limits = c(0, 41)) %>%\n  add_dataline(\"cigarrets\", type = \"bar\", size = 0.6, point = \"none\") %>%\n  add_statline(\"mean\", variable = \"cigarrets\", color = \"darkred\") %>%\n  add_statline(\"trend\", linetype = \"dashed\") %>%\n  set_casenames(position = \"strip\")"},{"path":"appendix.html","id":"appendix","chapter":"15 Appendix","heading":"15 Appendix","text":"","code":""},{"path":"appendix.html","id":"important-changes-with-version-0.53","chapter":"15 Appendix","heading":"15.1 Important changes with version 0.53","text":"","code":""},{"path":"appendix.html","id":"single-case-studies-with-cases-of-varying-phase-design","chapter":"15 Appendix","heading":"15.1.1 Single-case studies with cases of varying phase design","text":"Sometimes necessary combine single-cases different phase-designs one single-case study (instance cases include extension phase others ). Various functions scan now can handle data structure.","code":""},{"path":"appendix.html","id":"piping","chapter":"15 Appendix","heading":"15.1.2 Piping","text":"concept piping great writing clean intelligible code easier debug. imported pipe function %>% magrittr package. Since version 4.1, R pipe operator implementation |>. great works fine scan package. since |> Operator backwards compatible R prior versions 4.1, stick %>% .allow smooth “piping” began adding functions select_phases, subset, select_cases, set_var, set_dvar, set_mvar, set_pvar, add_l2.","code":""},{"path":"appendix.html","id":"important-changes-with-version-0.50","chapter":"15 Appendix","heading":"15.2 Important changes with version 0.50","text":"","code":""},{"path":"appendix.html","id":"new-function-names","chapter":"15 Appendix","heading":"15.2.1 New function names","text":"version 0.50 scan introduced new names functions. old function names still usable return “deprecated” warning telling use new function names.Table 15.1 shows changes.\nTable 15.1: scan previous current function names.\n","code":""},{"path":"appendix.html","id":"change-target-variables-in-functions","chapter":"15 Appendix","heading":"15.2.2 Change target variables in functions","text":"functions R analyze data now allow temporarily changing dependent, phase, measurement-time variables adding three argument:dvar sets dependent variable.pvar sets phase variable.mvar sets measurement-time variable.example, overlap(exampleAB_add, dvar = \"depression\") report overlap parameters variable depression overlap(exampleAB_add) take wellbeing dependent variable (defined scdf).finishing analysis, variables set back original values defined scdf.","code":""},{"path":"about-the-author.html","id":"about-the-author","chapter":"About the author","heading":"About the author","text":"Currently, professor research methods diagnostics department inclusive education University Potsdam Germany. studied education sciences University Cologne also PhD psychology. Thereafter, got tenured position senior researcher department special education (also University Cologne). Later habilitation “Pedagogic psychology learning disabilities” Carl von Ossietzky University Oldenburg.current work focuses :Single-case research designs, analyzing single case data, reporting single-case based results.Social inclusion social participation classrooms.Implementation Open Science Data Science concepts special education research.can find information homepage:https://jazznbass.github.io/homepage/","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]

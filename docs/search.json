[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"1","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Hello!glad found way book tells beginning use scan package. scan quiet thoroughly developed, book early stage. continuously working extending . point time release book available. draft full errors (code typos).\nsuggestions enhance book like report errors, comments, feedback etc. can posting issue gitHub repository book. can find repository https://github.com/jazznbass/scan-Book.Thank !Jürgen31 May 2021","code":""},{"path":"preface.html","id":"software-reference","chapter":"Preface","heading":"Software reference","text":"book created using Rmarkdown (Allaire et al., 2021) bookdown (Xie, 2021) packages within RStudio (RStudio Team, 2018) environment. analyses conducted R package scan version 0.53 (Wilbert & Lueke, 2021). R version 4.1.0 (2021-05-18) used (R Core Team, 2021).","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"Single case research become important broadly accepted method gaining insight educational processes. Especially field special education adopted single-case research proper method evaluating effectiveness intervention developmental processes underlying problems acquiring academic skills. Single-case studies also popular among teachers educators interested evaluating learning progress students. resulting information single-case research design provide helpful information pedagogical decision processes regarding teaching processes individual student also help decide, whether implement certain teaching methods classroom.\nDespite usefulness, standards conduct single-case studies, analyze data, present results less well developed compared group based research designs. Moreover, ample software helping analyse data, software designed towards analyzing group based data sets. Visualizing single-case data sets oftentimes means tinker spreadsheet programs analyzing becomes cumbersome endeavor. book addresses gap. written around specialized software tool managing, visualizing, analyzing single-case data. tool extension package software R (R Core Team, 2021) named scan, acronym single-case analyses.","code":""},{"path":"introduction.html","id":"a-teaser","chapter":"1 Introduction","heading":"1.1 A teaser","text":"go details scan exactly works, like provide example can scan. meant teaser get motivated tackle steep learning curve associated use R (land milk honey behind curve!). , mind understand every detail example, explained obvious get familiar scan.Let us set fictional context. Let us assume researching method foster calculation abilities struggling fourth grade students. developed intervention program named KUNO. pilot study like get evidence effectiveness new method set multi-baseline single-case study comprising three students take part KUNO program across period ten weeks. Throughout course regularly measured calculation abilities student 20 times reliable test. also implemented follow eight weeks additional five measures. calculation test gives number correctly solved calculation tasks within ten minutes.\nNow, invent data fictitious KUNO study laborious conduct real study actually evolve real intervention method.\nuse scan package code data. case consists 25 measurements. three phases: pre intervention (), intervention (B), follow-(C). Phases B different lengths. cases named combined single object called strange_study.Now visualize cases:Now need descriptive statistics:\n(#tab:describe_strange_study)Descriptive statistics\nSingle-case data oftentimes analyzed overlap indices. Let us get overview comparing phases B:\n(#tab:overlapAB_strange_study)Overlap indices. Comparing phase phase B\nchanges hold follow-? Let us compare phases C:\n(#tab:overlapAC_strange_study)Overlap indices. Comparing phase phase C\nFinally, conduct regression analyses cases piecewise regression model:\n(#tab:plm_strange_study)Piecewise-regression model predicting variable ‘values’\n\n(#tab:plm_strange_study)Piecewise-regression model predicting variable ‘values’\n\n(#tab:plm_strange_study)Piecewise-regression model predicting variable ‘values’\n","code":"\ncase1 <- scdf(\n  c(A = 3, 2, 4, 6, 4, 3, \n    B = 6, 5, 4, 6, 7, 5, 6, 8, 6, 7, 8, 9, 7, 8, \n    C = 6, 6, 8, 5, 7), \n  name = \"Dustin\"\n)\ncase2 <- scdf(\n  c(A = 0, 1, 3, 1, 4, 2, 1, \n    B = 2, 1, 4, 3, 5, 5, 7, 6, 3, 8, 6, 4, 7, \n    C = 6, 5, 6, 8, 6), \n  name = \"Mike\"\n)\ncase3 <- scdf(\n  c(A = 7, 5, 6, 4, 4, 7, 5, 7, 4,\n    B = 8, 9, 11, 13, 12, 15, 16, 13, 17, 16, 18,\n    C = 17, 20, 22, 18, 20), \n  name = \"Will\"\n)\nstrange_study <- c(case1, case2, case3)\nplot(\n  strange_study,\n  ylab = \"Correct\",\n  xlab = \"Days\",\n  lines = c(\"loreg\", col = \"red\"),\n  phase.names = c(\"Baseline\", \"Intervention\", \"Follow-up\"),\n  style = \"chart\",\n  ylim = c(0, 30),\n  xinc = 2\n)\ndescribe(strange_study)\noverlap(strange_study)\noverlap(strange_study, phases = c(\"A\", \"C\"))\nplm(strange_study$Dustin)\nplm(strange_study$Mike)\nplm(strange_study$Will)"},{"path":"some-things-about-r.html","id":"some-things-about-r","chapter":"2 Some things about R","heading":"2 Some things about R","text":"chapter get brief introduction R. familiar R might like go directly next chapter.\nR programming language optimized statistical purposes. created 1992 Ross Ihaka Robert Gentleman University Auckland. Since developed continuously became one leading statistical software programs. R unmatched versatility. used teaching introductory courses statistics sophisticated mathematical analysis. become defacto standard many scientific disciplines natural social sciences.\nR completely community driven . , developed extended anybody likes participate . comes costs can downloaded free major many minor platforms www.r-project.org. Yet, reliable proprietary software like Mplus, STATA, SPSS etc . can tell writing hard become R-fan statistics :-)\nR can used least two ways:can use applying data analyses. way functions like statistical programs. learn specific syntax R compute data analysis need. example mean(x) return mean variable x; lm(y ~ x) calculate linear regression criteria y predictor x plot(x, y) return scatter-plot variables x y.can use R program new statistical procedures, extend previous ones.second function origin R’s huge success versatility. New statistical procedures functions can published used everyone called packages. package usually contains several functions, help files example data-sets. Hundreds packages available help kinds specialized analyses. basic installation R comes large variety packages per installed. New packages can times easily installed within R. Admittedly, must latest developmental version new package installation sometimes can get bit complex. bit help persistence difficult accomplish.book hand describes use additional package named scan providing specialized functions single-case analyses. scan comes two versions: “stable” version developmental version. versions can installed directly within R. stable version much older provides limited functionality. Therefore, refer developmental version book.","code":""},{"path":"some-things-about-r.html","id":"basic-r","chapter":"2 Some things about R","heading":"2.1 Basic R","text":"R script language. , type text let R execute commands wrote . Either work console textfile. console command executed every time press RETURN-key. textfile type code, mark part like executed, run code (click certain key). latter text files can saved reused later R sessions. Therefore, usually work text file.value assigned variable <- operator. read arrow rather less sign minus sign. # followed comment make code understandable. , follows # interpreted R. vector chain several values. vector describe values measurement series. c function used build vector (e.g., c(1, 2, 3, 4)). like see content variable use print function. print(x) display content variable x. shortcut just type variable name (press return) x.Two important concepts R functions arguments. function name procedure something arguments provided . example, function mean calculated mean. mean argument x “expects” provide vector (series values) calculate mean. mean( x = c(1, 3, 5) ) compute mean values 1, 3, 5 return result 3. functions can take several arguments. mean example also takes argument trim. calculating trimmed mean. mean( x = c(1, 1, 3, 3, 5, 6, 7, 8, 9, 9), trim = 0.1) calculate 10% trimmed mean provided values. name first argument dropped. , mean( c(1, 3, 5) ) interpreted R mean( x = c(1, 3, 5) ). also provide variable argument.return value function can assigned new variable instead:Every function R help page written programmers. can retrieve pages help function short cut ?. help(\"mean\") display help page mean function. quotation marks necessary provide variable name mean word ‘mean.’ shortcut works ?mean. bit confusingly, need quotation marks .","code":"\n# x is assigned the value 10:\nx <- 10\n\n# See what's inside of x:\nx[1] 10\n# x is assigned a vector with three values:\nx <- c(10, 11, 15)\n\n# ... and display the content of x:\nx[1] 10 11 15\nvalues <- c(1, 4, 5, 6, 3, 7, 7, 5)\nmean(x = values)[1] 4.75\n# or shorter:\nmean(values)[1] 4.75\ny <- c(1, 4, 5, 6, 3, 7, 7, 5)\nres <- mean(y)\n#now res contains the mean of y:\nres[1] 4.75"},{"path":"the-scan-package.html","id":"the-scan-package","chapter":"3 The scan package","heading":"3 The scan package","text":"","code":""},{"path":"the-scan-package.html","id":"installing-the-scan-package","chapter":"3 The scan package","heading":"3.1 Installing the scan package","text":"can use install.packages function install scan.install.packages(\"scan\") install stable version.current stable release version 0.51. Please look Section Software reference version scan used creating book make sure version newer one installed.R contains many packages significantly slow packages loaded computer memory beginning R session. Therefore, installing scan needs activated beginning session use R. Usually session starts start R program ends closing R.activating package need library function. case library(scan). get something likescan 0.51 (2021-02-11)\nSingle-Case Data Analysis Single Multiple Baseline Designsindicating everything went smoothly scan ready job.","code":""},{"path":"the-scan-package.html","id":"development-version-of-scan","chapter":"3 The scan package","heading":"3.2 Development version of scan","text":"Alternatively, can compile development version scan . might necessary stable version bugs missing functions fixed.may need computer expertise get development version running. hosted gitHub <https://github.com/jazznbass/scan>.installation, can apply install_github function devtools package (make sure installed devtools package ):devtools::install_github(\"jazznbass/scan\", dependencies = TRUE)running Windows operating system probably install Rtools . Rtools contains additional programs (e.g. compilers) needed compile R source packages.can find Rtools : <https://cran.r-project.org/bin/windows/Rtools/>","code":""},{"path":"the-scan-package.html","id":"reporting-issues-with-scan-and-suggesting-enhancements","chapter":"3 The scan package","heading":"3.3 Reporting issues with scan and suggesting enhancements","text":"scan gitHub repository <https://github.com/jazznbass/scan> ideal place report bugs, problems, ideas enhancing scan. Please use issue tool (direct link: <https://github.com/jazznbass/scan/issues>).thankful feedback, corrections, whatever helps improve scan!","code":""},{"path":"the-scan-package.html","id":"functions-overview","chapter":"3 The scan package","heading":"3.4 Functions overview","text":"functions scan package can divided following categories:Manage data, analyze, manipulate, simulate, depict.Table 3.1 gives overview functions.\nTable 3.1: Functions scan\n","code":""},{"path":"the-scan-package.html","id":"changes-with-version-0.50","chapter":"3 The scan package","heading":"3.5 Changes with version 0.50","text":"","code":""},{"path":"the-scan-package.html","id":"new-function-names","chapter":"3 The scan package","heading":"3.5.1 New function names","text":"version 0.50 scan introduced new names functions. old function names still usable return “deprecated” warning telling use new function names.Table 3.2 shows changes.\nTable 3.2: scan privious current function names.\n","code":""},{"path":"the-scan-package.html","id":"change-target-variables-in-functions","chapter":"3 The scan package","heading":"3.5.2 Change target variables in functions","text":"functions R analyze data now allow temporarily changing dependent, phase, measurement-time variables adding three argument:dvar sets dependent variable.pvar sets phase variable.mvar sets measurement-time variable.example, overlap(exampleAB_add, dvar = \"depression\") report overlap parameters variable depression overlap(exampleAB_add) take wellbeing dependent variable (defined scdf).finishing analysis, variables set back original values defined scdf.","code":""},{"path":"managing-single-case-data.html","id":"managing-single-case-data","chapter":"4 Managing single-case data","heading":"4 Managing single-case data","text":"","code":""},{"path":"managing-single-case-data.html","id":"a-single-case-data-frame","chapter":"4 Managing single-case data","heading":"4.1 A single-case data frame","text":"Scan provides data-class encoding single-case data: single-case data frame (short scdf). scdf object contains one multiple single-case data sets optimized managing displaying data. Think scdf file including separate datasheet single case. datasheet made least three variables: measured values, phase identifier measured value, measurement time (mt) measure. Optionally, scdfs include variables single-case (e.g., control variables), also name case.\nTechnically, scdf object list containing data frames. class c(“scdf,”“list”). Additionally, scdf entails attribute scdf list attributes. var.values, var.phase, var.mt contain names values, phase, measurement time variable. default, names set values, phase, mt.\nSeveral functions available creating, transforming, merging, importing/exporting scdfs.","code":""},{"path":"managing-single-case-data.html","id":"creating-scdfs","chapter":"4 Managing single-case data","heading":"4.2 Creating scdfs","text":"scdf function basic tool creating single-case data frame. Basically, provide measurement values phase structure scdf object build. three different ways defining phase structure. First, defining beginning B-phase B.start argument, second, defining design phase.design argument third, setting parameters named vector dependent variable.B.start argument applicable single-case consists single -phase followed B-phase. remnant time scan handle sign-case designs two phases. number assigned B.start indicates measurement-time defined mt argument. , assume vector measurement times mt = c(1,3,7,10,15,17,18,20) B.start = 15 first measurement B-phase start fifth measurement mt = 15.\nphase.design argument named vector name length phase. phase names can set arbitrary, although recommend use capital letters (, B, C, …) phase followed , indicated, number phases repeat (A1, B1, A2, B2, …). Although possible give name one phase (, B, , B) might lead confusion errors coding analyzes scan.\nvector dependent variable includes named values, phase.design structure created automatically. named value sets beginning new phase. example c(= 3,2,4, B = 5,4,3, C = 6,7,6,5) create ABC-phase design 3, 3, 4 values per phase.\nUse one three methods time recommend use phase.design argument named vector method versatile.\nmeasurement times given, scdf automatically adds numbered sequentially 1, 2, 3, …, N N number measurements. circumstances might useful define individual measurement times measurement. example, want include days since beginning study time intervals measurements widely varying might get valid results way analyzing data regression approach.Missing values coded using NA.variables implemented adding new variable names vector containing values. Please aware new variable must never name one arguments function (.e. B.start, phase.design, name, dvar, pvar, mvar).Table 4.1 shows complete list arguments passed function.\nTable 4.1: Arguments scdf function\nwant create data-set comprising several single-cases easiest way first create scdf case join new scdf c command:like use default variable names (“values,” “phase,” “mt”) define dvar (dependent variable), pvar (variable indicating phase), mvar (measurement-time variable) arguments.","code":"\n### Three ways to code the same scdf\nscdf(values = c(A = 2,2,4,5, B = 8,7,6,9,8,7))\nscdf(values = c(2,2,4,5,8,7,6,9,8,7), B.start = 5)\nscdf(values = c(2,2,4,5,8,7,6,9,8,7), phase.design = c(A = 4, B = 6))\n# example of a more complex design \nscdf(\n  values = c(2,2,4,5, 8,7,6,9,8,7, 12,11,13), \n  mt = c(1,2,3,6, 8,9,11,12,16,18, 27,28,29),\n  phase.design = c(A = 4, B = 6, C = 3)\n)#A single-case data frame with one case\n\n Case1: values mt phase\n             2  1     A\n             2  2     A\n             4  3     A\n             5  6     A\n             8  8     B\n             7  9     B\n             6 11     B\n             9 12     B\n             8 16     B\n             7 18     B\n            12 27     C\n            11 28     C\n            13 29     C\nscdf(values = c(A = 2,2,NA,5, B = 8,7,6,9,NA,7))\nscdf(\n  values = c(A = 2,2,3,5, B = 8,7,6,9,7,7), \n  teacher = c(0,0,1,1,0,1,1,1,0,1), \n  hour = c(2,3,4,3,3,1,6,5,2,2)\n)#A single-case data frame with one case\n\n Case1: values teacher hour mt phase\n             2       0    2  1     A\n             2       0    3  2     A\n             3       1    4  3     A\n             5       1    3  4     A\n             8       0    3  5     B\n             7       1    1  6     B\n             6       1    6  7     B\n             9       1    5  8     B\n             7       0    2  9     B\n             7       1    2 10     B\ncase1 <- scdf(\n  values = c(A = 5, 7, 10, 5, 12, B = 7, 10, 18, 15, 14, 19), \n  name = \"Charlotte\"\n)\ncase2 <- scdf(\n  values = c(A = 3, 4, 3, 5, B = 7, 4, 7, 9, 8, 10, 12), \n  name = \"Theresa\"\n)\ncase3 <- scdf(\n  values = c(A = 9, 8, 8, 7, 5, 7, B = 6, 14, 15, 12, 16), \n  name = \"Antonia\"\n)\nmbd <- c(case1, case2, case3)\n# Example: Using a different name for the dependent variable\ncase <- scdf(\n  score = c(A = 5, 7, 10, 5, 12, B = 7, 10, 18, 15, 14, 19), \n  dvar = \"score\"\n)\n\n# Example: Using new names for the dependent and the phase variables\ncase <- scdf(\n  score = c(A = 3, 4, 3, 5, B = 7, 4, 7, 9, 8, 10, 12), \n  dvar = \"score\", pvar = \"section\"\n)\n\n# Example: Using new names for dependent, phase, and measurement-time variables\ncase <- scdf(\n  score = c(A = 9, 8, 8, 7, 5, 7, B = 6, 14, 15, 12, 16), \n  name = \"Antonia\", dvar = \"score\", pvar = \"section\", mvar = \"day\"\n)\n\nsummary(case)#A single-case data frame with one case\n\n        Measurements Design\nAntonia           11    A B\n\nVariable names:\nscore <dependent variable>\nday <measurement-time variable>\nsection <phase variable>"},{"path":"managing-single-case-data.html","id":"saving-and-reading-single-case-data-frames","chapter":"4 Managing single-case data","heading":"4.3 Saving and reading single-case data frames","text":"Usually, needed save scdf separate file computer. cases keep coding scdf described rerun every time working data. sometimes convenient separately save data file later use send colleague.\nsimplest way use base R functions saveRDS readRDS purpose. saveRDS takes least two arguments: first object like save second file name resulting file. scdf name study1 line saveRDS(study1, \"study1.rds\") save scdf drive. later read file study1 <- readRDS(\"study1.rds\"). getwd() return current active folder working .","code":""},{"path":"managing-single-case-data.html","id":"import-and-export-single-case-data-frames","chapter":"4 Managing single-case data","heading":"4.4 Import and export single-case data frames","text":"working programs besides R need export import scdf common file format. readSC imports comma-separated-variable (csv) file converts scdf object. default, csv-file contain columns case, phase, values. Optionally, column named mt provided. csv file build like :format single-case file spreadsheet program importing scanIn case variables names differ standard (.e. “case,” “values,” “phase,” “mt” ), set additional arguments fit file. readSC(\"example.csv\", cvar = \"name\", dvar = \"wellbeing\", pvar = \"intervention\", mvar = \"time\") example set variables attributes resulting scdf. Cases split variable \"name\", \"wellbeing\" set dependent variable (default values), phase information variable \"intervention\", measurement times variable \"time\". also reassign phase names within phase variable setting argument phase.names. Assume example file contains values 0 1 identify two phases recommend set “” “B” readSC(\"example.csv\", phase.names = c(\"\", \"B\")).reasons, computer systems German () language setups export csv-files default comma decimal point semicolon separator values. cases set two extra arguments import data:readSC(\"example.csv\", dec = \",\", sep = \";\")readSC.excel allows directly importing Microsoft Excel .xlsx .xls files. need library readxl installed R setup work.writeSC exports scdf object comma-separated-variables file (csv) can imported software data analyses (MS OFFICE, Libre Office etc.). scdf object converted single data frame case variable identifying rows subject. first argument command identifies scdf exported second argument (file) name resulting csv-file. file argument provided, dialog box opened choose file interactively. default, writeSC exports standard csv-format dot decimal point comma separating variables. system expects comma instead point decimal numbers may use dec sep arguments. example, writeSC(example, file = \"example.csv\", dec = \",\", sep = \";\") exports csv variation usually used example Germany.","code":"\ndat <- readSC.excel(\n  \"example2.xlsx\", cvar = \"name\", pvar = \"intervention\", \n  dvar = \"wellbeing\", mvar = \"time\", phase.names = c(\"A\",\"B\")\n)Imported 20 cases.\nsummary(dat)#A single-case data frame with 20 cases\n\n         Measurements Design\nCharles            20    A B\nKolten             20    A B\nAnnika             20    A B\nKaysen             20    A B\nUrijah             20    A B\nLeila              20    A B\nLeia               20    A B\nAleigha            20    A B\nGreta              20    A B\nAlijah             20    A B\nRicardo            20    A B\nDallas             20    A B\nEdith              20    A B\nBraylee            20    A B\nGiovanni           20    A B\nIsmael             20    A B\nGrady              20    A B\nRaina              20    A B\nCambria            20    A B\nLincoln            20    A B\n\nVariable names:\nintervention <phase variable>\nwellbeing <dependent variable>\ntime <measurement-time variable>\nage\ngender\ngym"},{"path":"managing-single-case-data.html","id":"displaying-and-manipulating-scdf-files","chapter":"4 Managing single-case data","heading":"4.5 Displaying and manipulating scdf-files","text":"scdf displayed just typing name object.print command allows specifying output. possible arguments cases (number cases displayed; Three default), rows (maximum number rows displayed; Fifteen default), digits (number digits). cases = '' rows = '' prints cases rows.argument long = TRUE prints case one instead side side (e.g., print(exampleAB, long = TRUE)).summary() gives concise overview scdfYou can extract one single-cases scdf multiple cases two ways. case name, can address $ operator.can use squared brackets","code":"\n#Beretvas2008 is an example scdf included in scan\nBeretvas2008#A single-case data frame with one case\n\n Case1: values mt phase\n           0.7  1     A\n           1.6  2     A\n           1.4  3     A\n           1.6  4     A\n           1.9  5     A\n           1.2  6     A\n           1.3  7     A\n           1.6  8     A\n            10  9     B\n          10.8 10     B\n          11.9 11     B\n            11 12     B\n            13 13     B\n          12.7 14     B\n            14 15     B\n#Huber2014 is an example scdf included in scan\nprint(Huber2014, cases = 2, rows = 10)#A single-case data frame with 4 cases\n\n Adam: mt compliance phase | Berta: mt compliance phase |\n        1         25     A |         1         25     A |\n        2       20.8     A |         2       20.8     A |\n        3       39.6     A |         3       39.6     A |\n        4         75     A |         4         75     A |\n        5         45     A |         5         45     A |\n        6       39.6     A |         6       14.6     A |\n        7       54.2     A |         7       45.8     A |\n        8         50     A |         8       33.3     A |\n        9       28.1     A |         9       31.3     A |\n       10         40     A |        10       32.5     A |\n# ... up to 66 more rows\n#  2 more cases\nsummary(Huber2014)#A single-case data frame with 4 cases\n\n          Measurements Design\nAdam                37    A B\nBerta               29    A B\nChristian           76    A B\nDavid               76    A B\n\nVariable names:\nmt <measurement-time variable>\ncompliance <dependent variable>\nphase <phase variable>\n\n\nNote:  Behavioral data (compliance in percent).\nAuthor of data:  Christian Huber \nHuber2014$David\nHuber2014[1] #extracts case 1\nHuber2014[2:3] #extracts cases 2 and 3\nnew.huber2014 <- Huber2014[c(1, 4)] #extracts cases 1 and 4\nprint(new.huber2014)#A single-case data frame with 2 cases\n\n Adam: mt compliance phase | David: mt compliance phase |\n        1         25     A |         1       65.6     A |\n        2       20.8     A |         2       37.5     A |\n        3       39.6     A |         3       58.3     A |\n        4         75     A |         4       72.9     A |\n        5         45     A |         5       33.3     A |\n        6       39.6     A |         6       59.4     A |\n        7       54.2     A |         7       77.1     A |\n        8         50     A |         8       54.2     A |\n        9       28.1     A |         9       68.8     A |\n       10         40     A |        10       43.8     A |\n       11       52.1     B |        11       62.5     B |\n       12       31.3     B |        12       64.6     B |\n       13       15.6     B |        13       60.4     B |\n       14       29.2     B |        14       81.3     B |\n       15       43.8     B |        15       79.2     B |\n# ... up to 61 more rows"},{"path":"creating-a-single-case-data-plot.html","id":"creating-a-single-case-data-plot","chapter":"5 Creating a single-case data plot","heading":"5 Creating a single-case data plot","text":"Plotting data first important approach analyzing. build scdf plot command helps visualize data. scdf includes one case multiple baseline figure provided. Various arguments can set customize appearance plot. Table 5.1 gives overview available arguments.\nLabels axes phases can changed xlab, ylab, phase.names arguments. x- y-scaling graphs default calculated minimum maximum included single cases. xlim ylim argument used set specific values. argument takes vector two numbers. first lower second upper limit scale. case multiple single cases NA sets individual minimum maximum case. Assume example study contains three single cases ylim = c(0, NA) set lower limit three single cases 0 upper limit individually maximum case.\nTable 5.1: Arguments plot function\nExtra lines can added plot using lines argument. lines argument takes several separate sub-arguments provided list. simple form list contains one element. lines = list('median') adds line median phase plot. Additional arguments like col lwd help format lines. adding red thick median lines use command lines = list('median', col = 'red', lwd = '2').\nTable 5.2: Values lines argument\nSpecific data points can highlighted using marks argument. list defines measurement times marked, marking color size marking. marks = list(position = c(1,5,6)) marks first, fifth, sixth measurement time. scdf contains one data-set marking data sets example. case define list Containing vectors, marking can individually defined data set. Assume, example, scdf comprising three data sets, marks = list(position = list(c(1,2), c(3,4), c(5,6))) highlight measurement times one two first data set, three four second five six third. pch, col cex define symbol, colour size markings.","code":"\n# plot with marks in a red circles 2.5 times larger than the standard symbol \n# size. exampleAB is an example scdf included in the scan package\nmarks <- list(\n  positions = list( c(8, 9), c(17, 19), c(7, 18) ), \n  col = 'red', cex = 2.5, pch = 1\n)\n#plot(exampleAB, marks = marks, style = \"sienna\")"},{"path":"creating-a-single-case-data-plot.html","id":"graphical-styles-of-a-plot","chapter":"5 Creating a single-case data plot","heading":"5.1 Graphical styles of a plot","text":"style argument plot function allows specify specific design plot. default, grid style applied. scan includes predefined styles. default, yaxis, tiny, small, big, chart, ridge, annotate, grid, grid2, dark, nodot, sienna. name style provided character string (e.g., style = \"grid\").\nstyles address specific elements (e.g., “small” “tiny” just influence text line sizes). styles lend combined style. achieved providing several style names plot argument: style = c(\"grid\", \"annotate\", \"small\").\nBeyond predefined styles, styles can individually modified created. New styles provided list several design parameters passed style argument plot function. Table 5.3 shows design parameter defined.\ndefine new style, first create list containing plain design. style_plot function returns list default values plain design (e.g., mystyle <- style_plot()). Single design parameters can now set assigning specific value within list. example, newstyle$fill <- \"grey90\" set fill parameter \"grey90\". Alternatively, changes plain design can already defined within style_plot function. set light-blue background color also orange grid, create style style_plot(fill.bg = \"lightblue\", grid = \"orange\").\nwant start plain design different predefined styles, set style argument. , example, like grid combined big style want change color grid orange type style_plot(style = c(\"grid\", \"big\"), col.grid = \"orange\"). plot(mydata, style = mystyle) apply new style plot. Please note new style passed quotation marks.\nTable 5.3: Arguments style plot function\nwidth lines set lwd argument, col used set line colour pch sets symbol data point.\npch argument can take several values defining symbol data points plotted.\n(#fig:symbols, pch)possible symbols pch values.\nexample customizing plot several additional graphic parameters\n(#fig:custom_style_example)plot customized style.\n","code":"\nnewstyle <- style_plot(fill = \"grey95\", grid = \"lightblue\", pch = 16)\n\nplot(exampleABAB, style = newstyle)"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"describe-and-manipulate-single-case-data-frames","chapter":"6 Describe and manipulate single-case data frames","heading":"6 Describe and manipulate single-case data frames","text":"","code":""},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"describing-and-summarizing","chapter":"6 Describe and manipulate single-case data frames","heading":"6.1 Describing and summarizing","text":"short description scdf provided summary command. results pretty much self explainingdescribe basic command get overview descriptive statistics. argument takes name scdf object. case scdf phase within case descriptive statistics provided. output table contains statistical indicators followed dot name phase (e.g., n.number measurements phase ).\nTable 6.1: Statistics describe command\nresulting table exported csv file used software (e.g., inserted word processing document). Therefore, first write results describeSC command R object use write.csv (write.csv2 German OS system setup) export descriptives element object.file written currently active working directory. sure , type getwd() (can use setwd() command define different working directory. get details type help(setwd) R).\nConflicting function names\nSometimes R packages include function names. example, describe() function also part psych package. Now, loaded psych package library(psych) scan describe() function scan masked (describe() now call corresponding function psych package).\ntwo solutions problem:\n\nactivate psych library scan library (now psych describe() function masked) \n\ninclude package name function call prefix scan::: scan::describe().\n","code":"\nsummary(Huber2014)#A single-case data frame with 4 cases\n\n          Measurements Design\nAdam                37    A B\nBerta               29    A B\nChristian           76    A B\nDavid               76    A B\n\nVariable names:\nmt <measurement-time variable>\ncompliance <dependent variable>\nphase <phase variable>\n\n\nNote:  Behavioral data (compliance in percent).\nAuthor of data:  Christian Huber \ndescribe(exampleABC)Describe Single-Case Data\n\nDesign:  A B C \n\n        Marie Rosalind Lise\n    n.A    10       15   20\n    n.B    10        8    7\n    n.C    10        7    3\n  mis.A     0        0    0\n  mis.B     0        0    0\n  mis.C     0        0    0\n\n        Marie Rosalind   Lise\n    m.A 52.00    52.27  52.35\n    m.B 72.10    73.25  73.57\n    m.C 68.00    66.43  71.33\n   md.A 53.50    52.00  52.00\n   md.B 72.50    72.00  73.00\n   md.C 69.00    68.00  76.00\n   sd.A  8.29     8.15  10.87\n   sd.B 11.37    13.13  10.64\n   sd.C 12.70    10.49  21.39\n  mad.A 11.12     7.41  10.38\n  mad.B 10.38    10.38  16.31\n  mad.C 17.79    11.86  20.76\n  min.A 39.00    37.00  35.00\n  min.B 47.00    54.00  60.00\n  min.C 51.00    52.00  48.00\n  max.A 63.00    65.00  74.00\n  max.B 85.00    97.00  87.00\n  max.C 87.00    78.00  90.00\ntrend.A -1.92     0.50  -0.09\ntrend.B -0.61     0.64   1.93\ntrend.C -0.19    -2.93 -14.00\n# write the results into a new R object named `res`\nres <- describe(exampleABC)\n# create a new file containing the descriptives on your harddrive\nwrite.csv(res$descriptives, file = \"descriptive data.csv\")"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"autoregression-and-trendanalyses","chapter":"6 Describe and manipulate single-case data frames","heading":"6.2 Autoregression and trendanalyses","text":"autocorr function calculates autocorrelations within phase across phases. lag.max argument defines lag autocorrelation computed.trendSC function provides overview linear trends single-case data. default, gives intercept slope linear squared regression measurement-time scores. Models computed separately phase across phases. advanced application, can add regression models using R specific formula class.","code":"\nautocorr(exampleABC, lag.max = 4)Autocorrelations\n\n     case phase lag_1 lag_2 lag_3 lag_4\n    Marie     A  0.29 -0.11  0.10  0.12\n    Marie     B -0.28 -0.10 -0.14 -0.09\n    Marie     C  0.00 -0.33 -0.14 -0.25\n    Marie   all  0.21  0.10  0.25  0.12\n Rosalind     A  0.37 -0.29 -0.33 -0.34\n Rosalind     B -0.34  0.24 -0.40  0.04\n Rosalind     C -0.07 -0.32  0.27  0.02\n Rosalind   all  0.49  0.38  0.22  0.17\n     Lise     A  0.04 -0.32 -0.05 -0.09\n     Lise     B -0.63  0.50 -0.40  0.31\n     Lise     C -0.38 -0.12    NA    NA\n     Lise   all  0.33  0.36  0.23  0.27\n# Simple example\ntrend(exampleABC[1])Trend for each phase\n\n            Intercept      B   Beta\nLinear.ALL     55.159  0.612  0.392\nLinear.A       60.618 -1.915 -0.700\nLinear.B       74.855 -0.612 -0.163\nLinear.C       68.873 -0.194 -0.046\nSquared.ALL    59.135  0.017  0.330\nSquared.A      57.937 -0.208 -0.712\nSquared.B      73.217 -0.039 -0.098\nSquared.C      68.490 -0.017 -0.038\n\nNote. Measurement-times of phase B start at 0 \n# Complex example\ntrend(exampleAB$Johanna, offset = 0, \n        model = c(\"Cubic\" = values ~ I(mt^3), \"Log Time\" = values ~ log(mt))\n)Trend for each phase\n\n             Intercept      B   Beta\nLinear.ALL      50.484  1.787  0.908\nLinear.A        54.300  0.100  0.066\nLinear.B        61.133  1.625  0.813\nSquared.ALL     57.879  0.079  0.871\nSquared.A       54.747 -0.013 -0.054\nSquared.B       66.343  0.094  0.775\nCubic.ALL       60.886  0.004  0.816\nCubic.A         54.959 -0.008 -0.169\nCubic.B         68.368  0.006  0.732\nLog Time.ALL    43.532 12.149  0.848\nLog Time.A      54.032  0.593  0.156\nLog Time.B      57.300  9.051  0.791\n\nNote. Measurement-times of phase B start at 1 "},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"missing-values","chapter":"6 Describe and manipulate single-case data frames","heading":"6.3 Missing values","text":"two kinds missing values single-case data series. First, missings explicitly recorded NA assigned phase measurement-time following example:second type missing occurs gaps measurement-times explicitly coded following example:cases, missing values pose threat internal validity overlap indices. Randomization tests robust first type missing values affected second type. Regression approaches less impacted types take interval measurement-times account.","code":"scdf(c(5, 3, 4, 6, 8, 7, 9, 7, NA, 6), phase.design = c(A = 4, B = 6))scdf(c(5, 3, 4, 6, 8, 7, 9, 7, 6), phase.design = c(A = 4, B = 5), \n     mt = c(1, 2, 3, 4, 5, 6, 7, 8, 10))\ncase1 <- scdf(c(3,6,2,4,3,5,2,6,3,2, 6,7,5,8,6,7,4,8,5,6), \n              phase.design = c(A = 10, B = 10), name = \"no NA\")\ncase2 <- scdf(c(3,6,2,4,3,5,2,NA,3,2, 6,7,5,8,6,NA,4,8,5,6), \n              phase.design = c(A = 10, B = 10), name = \"NAs\")\ncase3 <- fillmissingSC(case2)\nnames(case3) <- \"interpolated NAs\"\nex <- c(case1, case2, case3)\nplot(ex)\noverlap(ex)Overlap Indices\n\nDesign:  A B \nComparing phase 1 against phase 2 \n\n              no NA    NAs interpolated NAs\nPND           40.00  33.33            30.00\nPEM          100.00 100.00           100.00\nPET          100.00 100.00           100.00\nNAP           88.50  91.36            91.50\nNAP.rescaled  77.00  82.72            83.00\nPAND          72.50  80.56            80.00\nTAU_U          0.45   0.51             0.50\nBase_Tau       0.59   0.64             0.64\nDiff_mean      2.60   2.78             2.75\nDiff_trend     0.02   0.11             0.12\nSMD            1.65   1.96             2.02\nHedges_g       1.58   1.87             1.94"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"outlieranalysis","chapter":"6 Describe and manipulate single-case data frames","heading":"6.4 Outlieranalysis","text":"scan provides several methods analyzing outliers. implemented outliers function. Available methods standard deviation, mean average deviation, confidence intervals, Cook’s distance. criteria argument takes vector two information, first defines analyzing method (“SD,” “MAD,” CI“,”Cook“) second criteria. ”SD\" criteria number standard deviations (sd) mean phase value considered outlier. example, criteria = c(\"SD\",2) identify every value exceeding two sd mean outlier whereas sd mean refer phase value. might misleading particularly small samples Iglewicz Hoaglin Iglewicz & Hoaglin (1993) recommend use much robust median average deviation (MAD) instead. MAD constructed similar sd uses median instead mean. Multiplying MAD 1.4826 approximates sd normal distributed sample. corrected MAD applied outlier function. deviation 3.5 times corrected MAD median suggested outlier. use criterion set criteria = c(\"MAD\", 3.5). criteria = c(\"CI\", 0.95) takes exceeding 95% confidence interval criteria outliers. Cook’s distance method calculation outliers can applied strict AB-phase design. case, Cook’s distance analyses based piecewise-regression model. commonly, Cook’s distance exceeding 4/n used criteria. implemented setting `criteria = c(“Cook,”“4/n”).","code":"\noutlier(exampleABC_outlier, criteria = c(\"MAD\", 3.5))Outlier Analysis for Single-Case Data\n\nCriteria: Exceeds 3.5 Mean Average Deviations\n\n$Bernadette\n  phase md mad   lower    upper\n1     A 57   9 10.2981 103.7019\n2     B 76   7 39.6763 112.3237\n3     C 69  12  6.7308 131.2692\n\n$Penny\n  phase md mad   lower    upper\n1     A 52   6 20.8654  83.1346\n2     B 74  10 22.1090 125.8910\n3     C 68   8 26.4872 109.5128\n\n$Amy\n  phase md mad   lower    upper\n1     A 54   9  7.2981 100.7019\n2     B 73  11 15.9199 130.0801\n3     C 76  14  3.3526 148.6474\n\nCase Bernadette : Dropped 3 \nCase Penny : Dropped 2 \nCase Amy : Dropped 3 \n# Visualizing outliers with the plot function\nres <- outlier(exampleABC_outlier, criteria = c(\"MAD\", 3.5))\nplot(exampleABC_outlier, marks = res, style = \"annotate\", ylim = c(40,160))"},{"path":"describe-and-manipulate-single-case-data-frames.html","id":"smoothing-data","chapter":"6 Describe and manipulate single-case data frames","heading":"6.5 Smoothing data","text":"smooth_cases function provides procedures smooth single-case data eliminate noise. moving average function (mean- median-based) replaces data point average surrounding data points step--step. lag defines number measurements calculation based . lag-1 take average proceeding following value lag-2 average two proceeding two following measurements. local regression function, data point regressed surrounding data points. , proportion measurements surrounding value usually defined. intensity 0.2 take surrounding 20% data basis regression.\nfunction returns scdf smoothed data points.","code":"\n## Use the three different smoothing functions and compare the results\nberta_mmd <- smooth_cases(Huber2014$Berta)\nberta_mmn <- smooth_cases(Huber2014$Berta, FUN = \"movingMean\")\nberta_lre <- smooth_cases(Huber2014$Berta, FUN = \"localRegression\")\nnew_study <- c(Huber2014$Berta, berta_mmd, berta_mmn, berta_lre)\nnames(new_study) <- c(\"Original\", \"Moving Median\", \"Moving Mean\", \"Local Regression\")\nplot(new_study, style = \"grid2\")"},{"path":"overlapping-indices.html","id":"overlapping-indices","chapter":"7 Overlapping indices","heading":"7 Overlapping indices","text":"overlap provides table important overlap indices case scdf. calculating overlap indicators important know decrease increase values expected phases. default overlap assumes increase values. argument decreasing = TRUE set, calculation based assumption decreasing values.Overlap measures refer comparison two phases within single-case data-set. default, overlap compares Phase Phase B. phases argument needed phases scdf include phases named B comparison phases wanted.\nphases argument takes list two elements. One element two phases compared. elements contain either name two phases number position within scdf. want compare first third phase can set phases = list(1,3). phases case named ‘,’ ‘B,’ ‘C’ alternatively set phases = list(\"\",\"C\").\nalso possible compare combination several cases combination phases. two list-elements contain one phase concatenated c command. example ABAB-Design like compare two -phases two B-phases phases = list( c(1,3), c(2,4) ) trick.","code":"\noverlap(exampleAB)Overlap Indices\n\nDesign:  A B \nComparing phase 1 against phase 2 \n\n             Johanna Karolina   Anja\nPND           100.00    86.67  93.33\nPEM           100.00   100.00 100.00\nPET           100.00    93.33 100.00\nNAP           100.00    96.67  98.00\nNAP.rescaled  100.00    93.33  96.00\nPAND          100.00    90.00  90.00\nTAU_U           0.77     0.78   0.64\nBase_Tau        0.63     0.59   0.61\nDiff_mean      19.53    21.67  20.47\nDiff_trend      1.53     0.54   2.50\nSMD             8.11     3.17   6.71\nHedges_g        7.77     3.04   6.43\noverlap(exampleA1B1A2B2, phases = list( c(\"A1\",\"A2\"), c(\"B1\",\"B2\")))Overlap Indices\n\nDesign:  A1 B1 A2 B2 \nComparing phases 1 + 3 against phases 2 + 4 \n\n              Pawel Moritz Jannis\nPND           55.00  77.78  71.43\nPEM          100.00 100.00 100.00\nPET          100.00 100.00 100.00\nNAP           94.50  96.84  98.35\nNAP.rescaled  89.00  93.69  96.70\nPAND          82.50  85.00  90.00\nTAU_U          0.45   0.46   0.38\nBase_Tau       0.65   0.68   0.68\nDiff_mean     12.25  13.58  15.27\nDiff_trend    -0.05   0.00  -0.54\nSMD            2.68   3.27   3.62\nHedges_g       2.63   3.21   3.55"},{"path":"overlapping-indices.html","id":"percentage-non-overlapping-data-pnd","chapter":"7 Overlapping indices","heading":"7.1 Percentage non-overlapping data (PND)","text":"percentage non-overlapping data (PND) effect size measure described Scruggs, Mastropieri, & Casto (1987) . percentage data-points second phase single-case study exceeding maximum value first phase. case study expect decrease values second phase, PND calculated percentage data-point second phase minimum first phase.\nFigure 7.1: Illustration PND. PND 60% 9 15 datapoints phase B higher maximum phase .\nfunction pnd provides PND case well mean PNDs scdf. expect decreasing values set decreasing = TRUE. two phases phases named B, use phases argument described beginning chapter.","code":"\npnd(exampleAB)Percent Non-Overlapping Data\n\n     Case    PND Total Exceeds\n  Johanna   100%    15      15\n Karolina 86.67%    15      13\n     Anja 93.33%    15      14\n\nMean  : 93.33 %"},{"path":"overlapping-indices.html","id":"percentage-exceeding-the-median-pem","chapter":"7 Overlapping indices","heading":"7.2 Percentage exceeding the median (PEM)","text":"pem function returns percentage phase B data exceeding phase median. Additionally, binomial test 50/50 distribution computed. Different measures central tendency can addressed alternative analyses.\nFigure 7.2: Illustration PEM. PEM 75% 9 12 datapoints phase B higher median phase .\n","code":"\npem(exampleAB)Percent Exceeding the Median\n\n         PEM positives total binom.p\nJohanna  100        15    15       0\nKarolina 100        15    15       0\nAnja     100        15    15       0\n\nAlternative hypothesis: true probability > 50%"},{"path":"overlapping-indices.html","id":"percentage-exceeding-the-regression-trend-pet","chapter":"7 Overlapping indices","heading":"7.3 Percentage exceeding the regression trend (PET)","text":"pet function provides percentage phase B data points exceeding prediction based phase trend. binomial test 50/50 distribution computed. Furthermore, percentage phase B data points exceeding upper (lower) 95 percent confidence interval predicted progress computed.\nFigure 7.3: Illustration PET. PET 66.7% 10 15 datapoints phase B higher projected trend-line phase .\n","code":"\npet(exampleAB)Percent Exceeding the Trend\n\nN cases =  3 \n\n             PET binom.p  PET CI\nJohanna  100.000       0  86.667\nKarolina  93.333       0   0.000\nAnja     100.000       0 100.000\n\nBinom.test: alternative hypothesis: true probability > 50%\nPET CI: Percent of values greater than upper 95% confidence threshold (greater 1.645*se above predicted value)"},{"path":"overlapping-indices.html","id":"percentage-of-all-non-overlapping-data-pand","chapter":"7 Overlapping indices","heading":"7.4 Percentage of all non-overlapping data (PAND)","text":"pand function calculates percentage non-overlapping data (Richard . Parker, Hagan-Burke, & Vannest, 2007), index quantify level increase (decrease) performance onset intervention. argument correction = TRUE makes pand use frequency matrix, corrected ties. tie counted half measurement phases. Set correction = FALSE use uncorrected matrix, recommended.PAND indicates nonoverlap phase B data (like PND), uses data therefore based one single (probably unrepresentative) datapoint. Furthermore, PAND allows comparison real expected associations (Chi-square test) estimation effect size Phi, equals Pearsons r dichotomous data. Thus, phi-Square amount explained variance. original procedure computing PAND account ambivalent datapoints (ties). newer NAP overcomes problem better precision-power (Richard . Parker, Vannest, & Davis, 2011).","code":"\npand(exampleAB)Percentage of all non-overlapping data\n\nPAND =  93.3 %\nΦ =  0.822  ; Φ² =  0.676 \n\nNumber of Cases: 3 \nTotal measurements: 60  (in phase A: 15; in phase B: 45)\nn overlapping data per case: 0, 2, 2\nTotal overlapping data: n = 4 ; percentage = 6.7 \n\n2 x 2 Matrix of proportions\n    % expected\n    A   B   total\n%    A  21.7    3.3 25\nreal B  3.3 71.7    75\n total  25  75\n\n2 x 2 Matrix of counts\n    expected\n    A   B   total\n     A  13  2   15\nreal B  2   43  45\n total  15  45\n\n\nNote. Matrix is corrected for ties\n\nCorrelation based analysis:\n\nz = 6.316, p = 0.000, τ = 0.822 "},{"path":"overlapping-indices.html","id":"nonoverlap-of-all-pairs-nap","chapter":"7 Overlapping indices","heading":"7.5 Nonoverlap of all pairs (NAP)","text":"nap function calculates nonoverlap pairs (Richard . Parker & Vannest, 2009). NAP summarizes overlap pairs phase phase B data points. increase phase B scores expected, non-overlapping pair higher phase B data point. NAP equals number pairs showing overlap / number pairs. NAP can take values 50 100 percent, rescaled therefore intuitive NAP (0-100%) also displayed. NAP equivalent U-test Wilcox rank sum test. Thus, Wilcox test conducted reported case.","code":"\nnap(exampleAB)Nonoverlap of All Pairs\n\n     Case NAP Rescaled Pairs Positives Ties   W       p\n  Johanna 100      100    75        75    0 0.0 0.00062\n Karolina  97       93    75        72    1 2.5 0.00129\n     Anja  98       96    75        73    1 1.5 0.00095"},{"path":"overlapping-indices.html","id":"tau-u","chapter":"7 Overlapping indices","heading":"7.6 Tau-U","text":"tau_u function takes scdf returns Tau-U calculations single-case within file. Additionally, overall Tau-U value calculated cases. overall Tau-U value average Tau-U values weighted standard error. procedure proposed Richard . Parker, Vannest, Davis, & Sauber (2011).\ntau_u function provides two methods calculation Tau-U. setting argument method = \"parker\", Tau-U calculated described Richard . Parker, Vannest, Davis, & Sauber (2011). procedure lead Tau-U values 1 -1 difficult interpret. method = \"complete, default, applies correction keeps values within -1 1 range appropriate.\nmethod proposed Richard . Parker, Vannest, Davis, & Sauber (2011) data value (ties) ignored treated data available. Alternatively, ties might considered favor intervention . latter, ties.method argument set ties.method = \"positive\" ties.method = \"negative\". default \"omit\" following Richard . Parker, Vannest, Davis, & Sauber (2011).\nstandard return tau_u function display calculations. like details, apply print function additional argument complete = TRUE.","code":"\ndat <- scdf(c(2,0,1,4,3,5,9,7,8), phase.design = c(A = 4, B = 5))\nres <- tau_u(dat)\nprint(res, complete = TRUE)Tau-U\nMethod: complete \nApplied Kendall's Tau-b\n\nCase: Case1 \n                            pairs pos neg ties  S    D   Tau SD_S VAR_S SE_Tau\nA vs. B                        20  19   1    0 18 20.0 0.900 8.16 66.67  0.408\nTrend A                         6   4   2    0  2  6.0 0.333 2.94  8.67  0.491\nTrend B                        10   8   2    0  6 10.0 0.600 4.08 16.67  0.408\nA vs. B - Trend A              26  21   5    0 16 30.6 0.523 8.68 75.33  0.284\nA vs. B + Trend B              30  27   3    0 24 32.9 0.730 9.13 83.33  0.278\nA vs. B + Trend B - Trend A    36  29   7    0 22 36.0 0.611 9.59 92.00  0.266\n                                Z       p\nA vs. B                     2.205 0.02749\nTrend A                     0.679 0.49691\nTrend B                     1.470 0.14164\nA vs. B - Trend A           1.843 0.06527\nA vs. B + Trend B           2.629 0.00856\nA vs. B + Trend B - Trend A 2.294 0.02181\ntau_u(exampleAB)Tau-U\nMethod: complete \nApplied Kendall's Tau-b\n\nOverall Tau-U: \n                       Model Tau_U     se    z        p\n                     A vs. B 0.969 0.1772 5.47 4.54e-08\n           A vs. B - Trend A 0.590 0.1064 5.54 3.04e-08\n           A vs. B + Trend B 0.740 0.0960 7.71 1.29e-14\n A vs. B + Trend B - Trend A 0.731 0.0942 7.75 9.09e-15\n\nCase: Johanna \n                              Tau SE_Tau    Z     p\nA vs. B                     1.000  0.306 3.27 0.001\nA vs. B - Trend A           0.592  0.184 3.22 0.001\nA vs. B + Trend B           0.786  0.166 4.75 0.000\nA vs. B + Trend B - Trend A 0.765  0.163 4.71 0.000\n\nCase: Karolina \n                              Tau SE_Tau    Z     p\nA vs. B                     0.940  0.308 3.06 0.002\nA vs. B - Trend A           0.554  0.184 3.01 0.003\nA vs. B + Trend B           0.805  0.166 4.85 0.000\nA vs. B + Trend B - Trend A 0.783  0.163 4.81 0.000\n\nCase: Anja \n                              Tau SE_Tau    Z     p\nA vs. B                     0.966  0.308 3.14 0.002\nA vs. B - Trend A           0.624  0.186 3.36 0.001\nA vs. B + Trend B           0.626  0.167 3.74 0.000\nA vs. B + Trend B - Trend A 0.642  0.164 3.91 0.000"},{"path":"overlapping-indices.html","id":"reliable-change-index","chapter":"7 Overlapping indices","heading":"7.7 Reliable change index","text":"Basically, reliable change index (rci) depicts post-test pre-test value. Based reliability measurements standard-deviation standard error calculated. mean difference phase-phase-B divided standard-error. Several authors proposed refined methods calculating rci.rci function computes three indices reliable change (Wise, 2004) corresponding descriptive statistics.","code":"\nrci(exampleAB$Johanna, rel = 0.8, graph = TRUE)Reliable Change Index\n\nMean Difference =  19.53333 \nStandardized Difference =  1.678301 \n\nDescriptives:\n         n     mean       SD       SE\nA-Phase  5 54.60000 2.408319 1.077033\nB-Phase 15 74.13333 8.943207 3.999524\n\nReliability =  0.8 \n\n95 % Confidence Intervals:\n           Lower    Upper\nA-Phase 52.48905 56.71095\nB-Phase 66.29441 81.97226\n\nReliable Change Indices:\n                             RCI\nJacobson et al.         18.13624\nChristensen and Mendoza 12.82426\nHageman and Arrindell   18.49426"},{"path":"piecewise-linear-regressions.html","id":"piecewise-linear-regressions","chapter":"8 Piecewise linear regressions","heading":"8 Piecewise linear regressions","text":"piecewise regression analysis (sometimes called segmented regression) data-set split specific break point regression parameters (intercept slopes) calculated separately data break point. done assume break point qualitative change happens affecting intercept slope. approach lends perfectly analyze single-case data statistical point view time-series data segmented phases. general model single-case data based piecewise regression approach suggested Huitema McKean Huitema & Mckean (2000). refer two-phase single-case designs pre-intervention phase containing measurements start intervention (-phase) intervention phase containing measurements beginning intervention’s start lasting throughout intervention (B-phase).model, four parameters predict outcome specific measurement point:performance beginning study (intercept),performance beginning study (intercept),developmental effect leading continuous increase throughout measurements (trend effect),developmental effect leading continuous increase throughout measurements (trend effect),intervention effect leading immediate constant increase performance (level effect), andan intervention effect leading immediate constant increase performance (level effect), anda second intervention effect evolves continuously beginning intervention (slope effect).second intervention effect evolves continuously beginning intervention (slope effect).scan provides implementation based piecewise regression approach. Though original model extended several factors:multiple phase designsadditional (control) variablesautoregression modelinglogistic, binomial, poisson distributed dependent variables error termsmultivariate analyzes analyzing effect intervention one outcome variable.","code":""},{"path":"piecewise-linear-regressions.html","id":"the-basic-plm-function","chapter":"8 Piecewise linear regressions","heading":"8.1 The basic plm function","text":"basic function applying regression analyzes single-case dataset plm. function analyzes one single-case. simplest way, plm takes one argument scdf object returns full piecewise regression analyzes.","code":"\nplm(exampleAB$Johanna)Piecewise Regression Analysis\n\nDummy model:  B&L-B \n\nFitted a gaussian distribution.\nF(3, 16) = 28.69; p = 0.000; R² = 0.843; Adjusted R² = 0.814\n\n                   B   2.5%  97.5%    SE      t     p delta R²\nIntercept     54.300 43.978 64.622 5.267 10.310 0.000         \nTrend mt       0.100 -3.012  3.212 1.588  0.063 0.951   0.0000\nLevel phase B  6.333 -2.979 15.646 4.751  1.333 0.201   0.0174\nSlope phase B  1.525 -1.642  4.692 1.616  0.944 0.359   0.0087\n\nAutocorrelations of the residuals\n lag    cr\n   1 -0.32\n   2 -0.13\n   3 -0.01\n\nFormula: values ~ 1 + mt + phaseB + interB"},{"path":"piecewise-linear-regressions.html","id":"dummy-model","chapter":"8 Piecewise linear regressions","heading":"8.1.1 Dummy model","text":"model argument used code dummy variable. dummy variable used compute slope level effects phase variable.\nphase variable categorical, identifying phase measurement. Typically, categorical variables implemented means dummy variables. piecewise regression model two phase effects estimated: level effect slope effect. level effect implemented quite straight forward: phase beginning second phase new dummy variable created values zero measurements except measurements phase focus values one set.estimating slope effect phase, another kind dummy variables created. Like dummy variables level effects values set zero measurements except ones phase focus. , values start increase every measurement end phase.\nVarious suggestions made regarding way values increase. B&L-B model starts one first measurement phase increases every measurement H-M model starts zero.single-case studies two phases gets bit complicated. Applying fore described models three phases result comparison phase first phase (usually Phase). , regression weights significance tests depict differences phase values phase . might OK depending interested . lot cases interested analyzing effects phase compared previous one.\nachieved applying JW dummy model. model, dummy variable level effect set zero phases preceding phase focus set one remaining measurements. Similar, dummy variable slope effect set zero phases preceding one focus starts one first measurement target phase increases last measurement case.","code":""},{"path":"piecewise-linear-regressions.html","id":"adjusting-the-model","chapter":"8 Piecewise linear regressions","heading":"8.1.2 Adjusting the model","text":"piecewise regression reveals significant level effect two non significant effects trend slope. analyses like put slope effect equation. several ways . easiest way unset slope argument: slope = FALSE.resulting estimations trend level effects now significant. model estimated trend effect 1.01 points per measurement time level effect 2.46 points. , beginning intervention (B-phase) score increases 15.38 points (5 x 1.01 + 10.33).","code":"\nexample <- scdf(\n   values = c(55, 58, 53, 50, 52, 55, 68, 68, 81, 67, 78, 73, 72, 78, 81, 78, 71, 85, 80, 76),\n   phase.design = c(A = 5, B = 15)\n)\n\nplm(example)Piecewise Regression Analysis\n\nDummy model:  B&L-B \n\nFitted a gaussian distribution.\nF(3, 16) = 21.36; p = 0.000; R² = 0.800; Adjusted R² = 0.763\n\n                   B   2.5%  97.5%    SE      t     p delta R²\nIntercept     57.800 46.521 69.079 5.755 10.044 0.000         \nTrend mt      -1.400 -4.801  2.001 1.735 -0.807 0.432   0.0081\nLevel phase B 14.467  4.291 24.642 5.192  2.786 0.013   0.0970\nSlope phase B  2.500 -0.961  5.961 1.766  1.416 0.176   0.0250\n\nAutocorrelations of the residuals\n lag    cr\n   1 -0.28\n   2  0.05\n   3 -0.11\n\nFormula: values ~ 1 + mt + phaseB + interB\nplm(example, slope = FALSE)Piecewise Regression Analysis\n\nDummy model:  B&L-B \n\nFitted a gaussian distribution.\nF(2, 17) = 29.30; p = 0.000; R² = 0.775; Adjusted R² = 0.749\n\n                   B   2.5%  97.5%    SE      t     p delta R²\nIntercept     50.559 45.239 55.878 2.714 18.627 0.000         \nTrend mt       1.014  0.364  1.664 0.332  3.057 0.007   0.1236\nLevel phase B 10.329  1.674 18.983 4.416  2.339 0.032   0.0724\n\nAutocorrelations of the residuals\n lag    cr\n   1 -0.07\n   2  0.06\n   3 -0.17\n\nFormula: values ~ 1 + mt + phaseB"},{"path":"piecewise-linear-regressions.html","id":"adding-additional-predictors","chapter":"8 Piecewise linear regressions","heading":"8.1.3 Adding additional predictors","text":"complex analyses additional predictors can included piecewise regression model., change regression formula ‘manually’ applying update argument. update argument allows change underlying regression formula. add new variable named example newVar, set update = .~. + newVar. .~. part takes internally build formula + newVar adds variable named newVar equation.formula two parts divided tilde. Left tilde variable predicted right predictors. 1 indicates intercept, variable mt estimates trend effect, phaseB level effect B-phase variable interB slope effect B-phase. formula explicitly defined set formula = values ~ 1 + mt + phaseB + interB (assuming AB-design) estimate full piecewise regression model.","code":"\nplm(exampleAB_add, update = .~. + cigarrets)Piecewise Regression Analysis\n\nDummy model:  B&L-B \n\nFitted a gaussian distribution.\nF(4, 35) = 5.87; p = 0.001; R² = 0.402; Adjusted R² = 0.333\n\n                            B   2.5%  97.5%    SE      t     p delta R²\nIntercept              48.579 42.539 54.618 3.081 15.765 0.000         \nTrend day               0.392 -0.221  1.005 0.313  1.253 0.218   0.0269\nLevel phase Medication  3.753 -2.815 10.321 3.351  1.120 0.270   0.0214\nSlope phase Medication -0.294 -0.972  0.384 0.346 -0.850 0.401   0.0124\ncigarrets              -0.221 -1.197  0.755 0.498 -0.443 0.660   0.0034\n\nAutocorrelations of the residuals\n lag    cr\n   1  0.20\n   2 -0.19\n   3 -0.16\n\nFormula: wellbeing ~ day + phaseMedication + interMedication + cigarrets"},{"path":"piecewise-linear-regressions.html","id":"to-be-written-modelling-autoregression","chapter":"8 Piecewise linear regressions","heading":"8.1.4 [to be written] Modelling autoregression","text":"","code":"\nautocorr(Grosche2011)Autocorrelations\n\n  case phase lag_1 lag_2 lag_3\n   Eva     A -0.04 -0.56 -0.01\n   Eva     B  0.46  0.10  0.16\n   Eva   all  0.48  0.13  0.24\n Georg     A  0.51 -0.01 -0.13\n Georg     B -0.01 -0.02 -0.14\n Georg   all  0.40  0.15 -0.12\n  Olaf     A  0.64  0.29 -0.24\n  Olaf     B -0.45 -0.20  0.16\n  Olaf   all  0.35  0.12 -0.09"},{"path":"piecewise-linear-regressions.html","id":"to-be-written-multivariate-piecewise-regression","chapter":"8 Piecewise linear regressions","heading":"8.2 [to be written] Multivariate piecewise regression","text":"","code":"\nmplm(exampleAB_add, dvar = c(\"wellbeing\", \"depression\"))Registered S3 methods overwritten by 'car':\n  method                          from\n  influence.merMod                lme4\n  cooks.distance.influence.merMod lme4\n  dfbeta.influence.merMod         lme4\n  dfbetas.influence.merMod        lme4Multivariate piecewise linear model\n\nDummy model: B&L-B \n\nCoefficients: \n                        wellbeing depression\n(Intercept)            48.0380952  4.0857143\nday                     0.3785714  0.1142857\nLevel Phase Medication  3.8633333 -0.7800000\nSlope Phase Medication -0.2754945 -0.1650549\n\nFormula: y ~ 1 + day + phaseMedication + interMedication\n\nType III MANOVA Tests: Pillai test statistic\n                       Df test stat approx F num Df den Df Pr(>F)    \n(Intercept)             1   0.89679  152.053      2     35 <2e-16 ***\nday                     1   0.05450    1.009      2     35 0.3750    \nLevel Phase Medication  1   0.03846    0.700      2     35 0.5034    \nSlope Phase Medication  1   0.03911    0.712      2     35 0.4975    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"piecewise-linear-regressions.html","id":"multilevel-plm-analyses","chapter":"8 Piecewise linear regressions","heading":"8.3 Multilevel plm analyses","text":"Multilevel analyses can take piecewise-regression approach even . allows foranalyzing effects phases multiple single-cases oncedescribing variability subjects regarding effects, andintroducing variables factors explaining differences.basic function applying multilevel piecewise regression analysis hplm. hplm function similar plm function, recommend get familar plm applying hplm.simple example:example inlcuding random slopes:","code":"\nhplm(exampleAB_50)Hierarchical Piecewise Linear Regression\n\nEstimation method ML \nSlope estimation method: B&L-B \n50 Cases\n\nICC = 0.195; L = 192.0; p = 0.000\n\nFixed effects (values ~ 1 + mt + phaseB + interB)\n\n                   B    SE   df      t p\nIntercept     51.614 1.282 1281 40.274 0\nTrend mt       0.671 0.115 1281  5.844 0\nLevel phase B 12.938 0.590 1281 21.942 0\nSlope phase B  0.859 0.119 1281  7.236 0\n\nRandom effects (~1 | case)\n\n          EstimateSD\nIntercept      8.179\nResidual       5.335\nhplm(exampleAB_50, random.slopes = TRUE)Hierarchical Piecewise Linear Regression\n\nEstimation method ML \nSlope estimation method: B&L-B \n50 Cases\n\nICC = 0.195; L = 192.0; p = 0.000\n\nFixed effects (values ~ 1 + mt + phaseB + interB)\n\n                   B    SE   df      t p\nIntercept     51.720 1.348 1281 38.378 0\nTrend mt       0.637 0.125 1281  5.080 0\nLevel phase B 13.090 0.762 1281 17.176 0\nSlope phase B  0.887 0.129 1281  6.856 0\n\nRandom effects (~1 + mt + phaseB + interB | case)\n\n              EstimateSD\nIntercept          8.691\nTrend mt           0.343\nLevel phase B      3.654\nSlope phase B      0.358\nResidual           4.994"},{"path":"piecewise-linear-regressions.html","id":"adding-additional-l2-variables","chapter":"8 Piecewise linear regressions","heading":"8.3.1 Adding additional L2-variables","text":"analyses researchers want investigate whether attributes individuals contribute effectiveness intervention. example might intervention mathematical abilities less effective student migration background due much language related material within training. analyses can also conducted scan. Therefore, need define new data frame including relevant information subjects single-case studies want analyze. data frame consists variable labeled case correspond case names scfd variables attributes subjects. build data frame can use R function data.frame.Multilevel analyses require high number Level 2 units. exact number depends complexity analyses, size effects, number level 1 units, variability residuals. surely need least 30 level 2 units. single-case design , need least 30 single-cases (subjects) within study. setting level 2 data frame use data.l2 argument hplm function include analysis. specify regression function using update.fixed argument. level 2 variables can added just like additional variable. example, added level 2 data-set two variables sex age. update construed level 1 piecewise regression model .~. plus additional level 2 variables interest + sex + age. complete argument update.fixed = .~. + sex + age. analyses estimate main effect sex age overall performance. case want analyze interaction intervention effects example sex subject add additional interaction term (cross-level interaction). interaction defined colon. sex:phase indicates interaction sex level effect single case study. complete formula now update.fixed = .~. + sex + age + sex:phase.scan includes example single-case study 50 subjects example50 additional level 2 data-set example50.l2. first 10 cases example50.l2.Analyzing data hplm look like :sex factor levels f m. sexm effect male overall performance. age seem effect. drop age equation add interaction sex phase see whether sex effect due weaker impact intervention males.Now interaction phase:sexm significant main effect longer relevant. looks like intervention effect 7.5 points lower male subjects. level-effect 16.8 points female subjects 16.8 - 7.5 = 9.3 males.","code":"\nL2 <- data.frame(\n  case = c(\"Antonia\",\"Theresa\", \"Charlotte\", \"Luis\", \"Bennett\", \"Marie\"), \n  age = c(16, 13, 13, 10, 5, 14), \n  sex = c(\"f\",\"f\",\"f\",\"m\",\"m\",\"f\")\n)\nL2       case age sex\n1   Antonia  16   f\n2   Theresa  13   f\n3 Charlotte  13   f\n4      Luis  10   m\n5   Bennett   5   m\n6     Marie  14   f\nhplm(exampleAB_50, data.l2 = exampleAB_50.l2, update.fixed = .~. + sex + age)Hierarchical Piecewise Linear Regression\n\nEstimation method ML \nSlope estimation method: B&L-B \n50 Cases\n\nICC = 0.195; L = 192.0; p = 0.000\n\nFixed effects (values ~ mt + phaseB + interB + sex + age)\n\n                   B     SE   df      t     p\nIntercept     71.464 13.076 1281  5.465 0.000\nTrend mt       0.667  0.115 1281  5.808 0.000\nLevel phase B 12.951  0.590 1281 21.951 0.000\nSlope phase B  0.863  0.119 1281  7.264 0.000\nsexm          -2.130  2.336   47 -0.912 0.367\nage           -1.710  1.157   47 -1.478 0.146\n\nRandom effects (~1 | case)\n\n          EstimateSD\nIntercept      7.975\nResidual       5.335\nhplm(exampleAB_50, data.l2 = exampleAB_50.l2, update.fixed = .~. + sex + sex:phaseB)Hierarchical Piecewise Linear Regression\n\nEstimation method ML \nSlope estimation method: B&L-B \n50 Cases\n\nICC = 0.195; L = 192.0; p = 0.000\n\nFixed effects (values ~ mt + phaseB + interB + sex + phaseB:sex)\n\n                        B    SE   df       t     p\nIntercept          49.801 1.735 1280  28.711 0.000\nTrend mt            0.638 0.109 1280   5.847 0.000\nLevel phase B      16.762 0.644 1280  26.034 0.000\nSlope phase B       0.889 0.113 1280   7.884 0.000\nsexm                3.983 2.368   48   1.682 0.099\nLevel phase B:sexm -7.463 0.622 1280 -11.994 0.000\n\nRandom effects (~1 | case)\n\n          EstimateSD\nIntercept      8.144\nResidual       5.059"},{"path":"randomization-tests.html","id":"randomization-tests","chapter":"9 Randomization tests","heading":"9 Randomization tests","text":"rand_test function computes randomization test single multiple baseline single-case data. function based algorithm SCRT package (Bulte & Onghena, 2009, 2012), rewritten extended use AB designs.statsitics argument defines statistic comparison phases based . following comparisons possible:“Mean -B”: Uses difference mean phase mean phase B. * appropriate decrease scores expected phase B.“Mean B-”: Uses difference mean phase B mean phase . appropriate increase scores expected phase B.“Mean |-B|”: Uses absolute value difference means phases B.“Median -B”: “Mean -B,” based median.“Median B-”: “Mean B-,” based median.number\nSample size randomization distribution. exactness p-value can exceed 1/number (.e., number = 100 results p-values exactness one percent). Default number = 500. faster processing use number = 100. precise p-values set number = 1000.complete\nTRUE, distribution based complete permutation possible starting combinations. setting overwrites number Argument. default setting FALSE.limit\nMinimal number data points per phase sample. first number refers -phase second B-phase (e.g., limit = c(5, 3)). one number given, number applied phases. Default limit = 5.startpoints\nAlternative limit-parameter, startpoints exactly defines possible start points phase B (e.g., startpoints = 4:9 restricts phase B start points measurements 4 9. startpoints overwrite limit-parameter.exclude.equal\nset FALSE, default, random distribution values equal observed distribution counted null-hypothesis conform. , decrease probability rejecting null-hypothesis (increase p-value). exclude.equal set TRUE analyse one single-case design (multiple baseline data set) reach sufficient power. aware, increases chance alpha-error.graph\nset TRUE, histogram resulting distribution plotted.phases\nvector two characters numbers indicating two phases compared. E.g., phases = c(“,”“C”) phases = c(2,4) comparing second fourth phase. Phases combined providing list two elements. E.g., phases = list(= c(1,3), B = c(2,4)) compare phases 1 3 () 2 4 (B). Default phases = c(“,”“B”).","code":"\nrand_test(exampleAB, graph = TRUE)Randomization Test\n\nTest for 3 cases.\n\nComparing phase 1 against phase 2 \nStatistic:  Mean B-A \n\nMinimal length of each phase:  5 5 \nObserved statistic =  20.55556 \n\n\nDistribution based on a random sample of all 1331 possible combinations.\nn   =  500 \nM   =  18.59305 \nSD  =  1.114388 \nMin =  16.05185 \nMax =  21.34493 \n\np   =  0.036 \n\nShapiro-Wilk Normality Test: W = 0.979; p = 0.000  (Hypothesis of Normality rejected)\nz = 1.7611, p = 0.0391 (single sided)"},{"path":"default-settings.html","id":"default-settings","chapter":"10 Default settings","heading":"10 Default settings","text":"default settings scan can changed options() argument. Table 10.1 shows complete list options default values.\nTable 10.1: Scan Options\n","code":"\n# get the current value of an option\ngetOption(\"scan.print.rows\")[1] 15\n# set option to a different value\noptions(scan.print.rows = 5, scan.print.scdf.name = FALSE)\nprint(exampleAB)#A single-case data frame with 3 cases\n\n phase values mt | phase values mt | phase values mt |\n     A     54  1 |     A     41  1 |     A     55  1 |\n     A     53  2 |     A     59  2 |     A     58  2 |\n     A     56  3 |     A     56  3 |     A     53  3 |\n     A     58  4 |     A     51  4 |     A     50  4 |\n     A     52  5 |     A     52  5 |     A     52  5 |\n# ... up to 15 more rows\noptions(scan.print.rows = 15, scan.print.scdf.name = TRUE)\nprint(exampleAB)#A single-case data frame with 3 cases\n\n Johanna: phase values mt | Karolina: phase values mt | Anja: phase values mt |\n              A     54  1 |               A     41  1 |           A     55  1 |\n              A     53  2 |               A     59  2 |           A     58  2 |\n              A     56  3 |               A     56  3 |           A     53  3 |\n              A     58  4 |               A     51  4 |           A     50  4 |\n              A     52  5 |               A     52  5 |           A     52  5 |\n              B     61  6 |               B     57  6 |           B     55  6 |\n              B     62  7 |               B     56  7 |           B     68  7 |\n              B     71  8 |               B     67  8 |           B     68  8 |\n              B     66  9 |               B     75  9 |           B     81  9 |\n              B     64 10 |               B     66 10 |           B     67 10 |\n              B     78 11 |               B     69 11 |           B     78 11 |\n              B     70 12 |               B     68 12 |           B     73 12 |\n              B     74 13 |               B     73 13 |           B     72 13 |\n              B     82 14 |               B     77 14 |           B     78 14 |\n              B     77 15 |               B     79 15 |           B     81 15 |\n# ... up to 5 more rows"},{"path":"exporting-scan-results.html","id":"exporting-scan-results","chapter":"11 Exporting scan results","heading":"11 Exporting scan results","text":"export function make easier convert results scan analyses tables descriptions can add documents presentations. Basically, export takes scan object converts html-table latex output.\nexport build top knitr kableextra packages. list provided kable_options argument implemented kable function knitr list provided kable_styling_options implemented kable_styling command kableExtra package. export sets defaults functions can play around overwrite .\nexport works best used within rmarkdown file /within RStudio.\nRStudio[xxx continued!]","code":""},{"path":"exporting-scan-results.html","id":"single-case-data-files","chapter":"11 Exporting scan results","heading":"11.1 Single case data files","text":"\nTable 11.1: Single case data frame 3 cases\n","code":"\nexport(exampleA1B1A2B2_zvt)"},{"path":"exporting-scan-results.html","id":"descriptive-stats","chapter":"11 Exporting scan results","heading":"11.2 Descriptive stats","text":"\nTable 11.2: Descriptive statistics\n","code":"\nres <- describe(GruenkeWilbert2014)\nexport(res)"},{"path":"exporting-scan-results.html","id":"overlap-indices","chapter":"11 Exporting scan results","heading":"11.3 Overlap indices","text":"\nTable 11.3: Overlap indices. Comparing phases A1 + A2 phases B1 + B2\n","code":"\nres <- overlap(exampleA1B1A2B2_zvt, phases = list(c(1,3),c(2,4)))\nexport(res, flip = TRUE)"},{"path":"exporting-scan-results.html","id":"piecewise-linear-models","chapter":"11 Exporting scan results","heading":"11.4 Piecewise linear models","text":"\nTable 11.4: Piecewise-regression model predicting variable ‘values’\n","code":"\nres <- plm(exampleA1B1A2B2$Pawel)\nexport(res)"},{"path":"exporting-scan-results.html","id":"hierarchical-piecewise-regressions","chapter":"11 Exporting scan results","heading":"11.5 Hierarchical piecewise regressions","text":"\nTable 11.5: Hierarchical Piecewise Linear Regression predicting variable ‘values’\n","code":"\nres <- hplm(exampleAB_50, data.l2 = exampleAB_50.l2, lr.test = TRUE, random.slopes = TRUE)\nexport(res)"},{"path":"about-the-author.html","id":"about-the-author","chapter":"About the author","heading":"About the author","text":"Currently, professor research methods diagnostics department inclusive education University Potsdam Germany. studied education sciences University Cologne also PhD psychology. Thereafter, got tenured position senior researcher department special education (also University Cologne). Later habilitation “Pedagogic psychology learning disabilities” Carl von Ossietzky University Oldenburg.current work focuses :Single-case research designs, analyzing single case data, reporting single-case based results.Social inclusion social participation classrooms.Implementation Open Science Data Science concepts special education research.work can found :University Potsdam: https://www.uni-potsdam.de/en/inklusion/researchmethodsanddiagnostics/wilbert.htmlResearchgate: https://www.researchgate.net/profile/Juergen_Wilbert2github: https://github.com/jazznbassorcid: https://orcid.org/0000-0002-8392-2873Googel scholar: https://scholar.google.de/citations?user=RF7Siq4AAAAJ&hl=enEmpirische Sonderpädagogik: http://www.psychologie-aktuell.com/index.php?id=255OSF (Open science framework): https://osf.io/q7gme/","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]

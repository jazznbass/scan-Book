# Exporting *scan* results {#sec-export}

```{r}
#| results: asis
#| echo: false
function_structure("export")
```

The `export` function will make it easier to convert the results of your `scan` analyses into tables and descriptions you can add to your documents and presentations. Basically, `export` takes a `scan` object and converts it to an html-table or latex output.

::: callout-note
`export` has two "engines" implemented to create the output formats. The "kable" engine is build on top of the `knitr` and `kableextra` packages. The list provided in the `kable_options` argument is implemented in the `kable` function of `knitr` and the list provided to the `kable_styling_options` is implemented in the `kable_styling` command of the `kableExtra` package. `export` sets some defaults for these functions but you can play around and overwrite them.

The "gt" engine is a more recent development and build ontop of the `gt` package. "gt" allows to export to html, rtf, latex, docx, pdf, and png.

You can change the use of the engine by setting `options("scan.export.engine" = "gt")` or `options("scan.export.engine" = "kable")`.
:::

`export` works best when used within an rmarkdown file and/or within `RStudio`. In `RStudio`, the html table will be displayed in the *Viewer* pane. There you can click the export button (![](images/Screenshot%202023-08-02%20at%2013.31.05.png){width="78" height="18"}) to export an html or bitmap file or you can try *drag and drop* ➡️ *copy* and *paste* the table into another application.

Alternatively, you can set the `filename` argument to export the table directly from within the export function. The file name extension you provide will define the resulting file format (e.g. `filename = "results.html"`).

If you use the "kable engine", possible extensions and file formats are *html*, *png*, and *jpg*. The newer "gt engine" also allows to export to *docx*, *rtf*, *pdf*, and *tex* formats. To apply the new eninge, set `options("scan.export.engine" = "gt")`.

The examples provided in this book are created with the *gt engine*.

```{r}
#| eval: false

exampleAB |> 
  overlap() |> 
  export("my_file.html")
```

Most of the tables will have a default caption and footnotes. If you want to change these, use the `caption` and `footnote` arguments.

## Single case data files

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.scdf, label="scdf export", fname="export")
```

```{r}
#| warning: false
export(exampleA1B1A2B2_zvt)
```

## Descriptive stats

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_desc, label="describe export", fname="export")
```

The `flip` argument will rotate the table by 90 degrees.

```{r}
#| warning: false
res <- describe(GruenkeWilbert2014)
export(res)
```

## Standardized mean differences

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_smd, label="smd export", fname="export")
```

The `flip` argument will rotate the table by 90 degrees.

```{r}
#| warning: false
smd(exampleAB) |> export(flip = TRUE)
```

## Trend analysis

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_trend, label="trend export", fname="export")
```

```{r}
#| warning: false
exampleABC$Marie  |> 
  trend()  |> 
  export()
```

## Overlap indices

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_overlap, label="overlap export", fname="export")
```

The `flip` argument will rotate the table by 90 degrees.

```{r}
#| warning: false
exampleA1B1A2B2_zvt |> 
  select_phases(A = c(1,3), B = c(2,4)) |> 
  overlap() |> 
  export(flip = TRUE)
```

## Percentage non-overlapping data

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_pnd, label="pnd export", fname="export")
```

```{r}
#| warning: false
pnd(Huber2014) |> export()
```

## Percentage exceeding the trend

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_pet, label="pet export", fname="export")
```

```{r}
#| warning: false
pet(exampleAB_decreasing) |> export()
```

## Percentage exceeding the median

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_pem, label="pem export", fname="export")
```

```{r}
#| warning: false
pem(Huber2014) |> export()
```

## Nonoverlap of all pairs

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_nap, label="nap export", fname="export")
```

```{r}
#| warning: false
nap(Huber2014) |> export()
```

## Tau-U

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_tauu, label="tauu export", fname="export")
```

Set the argument `meta = TRUE` to get the results of the meta analysis or set `meta = FALSE` (the default) to get a table with each case.

```{r}
#| warning: false
tau_u(exampleAB_decreasing) |> export()
```

```{r}
#| warning: false
tau_u(exampleAB_decreasing) |> export(meta = TRUE)
```

```{r}
#| echo: false
options(scan.rename.predictors = "concise")
```

## Piecewise linear models

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_plm, label="plm export", fname="export")
```

```{r}
#| warning: false
res <- plm(exampleA1B1A2B2$Pawel)
export(res)
```

## Hierarchical piecewise regressions

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_hplm, label="hplm export", fname="export")
```

```{r warning=FALSE}
exampleAB_50  |> 
  add_l2(exampleAB_50.l2)  |> 
  hplm(lr.test = TRUE, random.slopes = TRUE)  |> 
  export()
```

## Multivariate piecewise regressions

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_mplm, label="mplm export", fname="export")
```

```{r warning=FALSE}
Leidig2018 |> 
  select_cases("1a1") |> 
  mplm(dvar = c("academic_engagement", "disruptive_behavior")) |> 
  export(std = TRUE)
```

## Bayesian regression analysis

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_bplm, label="bplm export", fname="export")
```

```{r warning=FALSE}
exampleAB_50  |> 
  bplm(random_level = TRUE)  |> 
  export()
```

```{r}
#| echo: false
options(scan.rename.predictors = "full")
```

## Power analyses {#sec-power}

```{r}
#| results: asis
#| echo: false
function_structure(scan:::export.sc_power, label="power_test export", fname="export")
```

```{r}
#| warning: false
design <- design(
  n = 1, phase_design = list(A = 6, B = 9),
  rtt = 0.8, level = 1.4, trend = 0.05
)
set.seed(124)
power_test(design, n_sim = 10) |> export()
```

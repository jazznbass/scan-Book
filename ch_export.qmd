# Exporting *scan* results

```{r results='asis', echo=FALSE}
function_structure("export")
```

The `export` function will make it easier to convert the results of your `scan` analyses into tables and descriptions you can add to your documents and presentations. Basically, `export` takes a `scan` object and converts it to an html-table or latex output.

::: callout-note
`export` it build on top of the `knitr` and `kableextra` packages. The list provided in the `kable_options` argument is implemented in the `kable` function of `knitr` and the list provided to the `kable_styling_options` is implemented in the `kable_styling` command of the `kableExtra` package. `export` sets some defaults for these functions but you can play around and overwrite them.
:::

`export` works best when used within an rmarkdown file and/or within `RStudio`.\
In `RStudio`

<!--# more explanations needed -->

## Single case data files

```{r results='asis', echo=FALSE}
function_structure(scan:::export.scdf, label="scdf export", fname="export")
```

```{r warning=FALSE}
export(exampleA1B1A2B2_zvt)
```

## Descriptive stats

```{r results='asis', echo=FALSE}
function_structure(scan:::export.sc_desc, label="describe export", fname="export")
```

```{r warning=FALSE}
res <- describe(GruenkeWilbert2014)
export(res)
```

## Standardized mean differences

```{r results='asis', echo=FALSE}
function_structure(scan:::export.sc_smd, label="smd export", fname="export")
```

```{r warning=FALSE}
smd(exampleAB) |> export(flip = TRUE)
```

## Trend analysis

```{r results='asis', echo=FALSE}
function_structure(scan:::export.sc_trend, label="trend export", fname="export")
```

```{r warning=FALSE}
exampleABC$Marie %>%
  trend() %>%
  export()
```


## Overlap indices

```{r results='asis', echo=FALSE}
function_structure(scan:::export.sc_overlap, label="overlap export", fname="export")
```

```{r warning=FALSE}
exampleA1B1A2B2_zvt %>%
  select_phases(A = c(1,3), B = c(2,4)) %>%
  overlap() %>%
  export(flip = TRUE)
```

tau_u(exampleAB_decreasing) |> export()

## Tau-U

```{r results='asis', echo=FALSE}
function_structure(scan:::export.sc_tauu, label="tauu export", fname="export")
```

Set the argument `case = "meta"` (the default) to get the results of the meta analysis or set `case = "all"` to get a table with each case.

```{r warning=FALSE}
tau_u(exampleAB_decreasing) |> export()
```

```{r warning=FALSE}
tau_u(exampleAB_decreasing) |> export(case = "all")
```

## Piecewise linear models

```{r results='asis', echo=FALSE}
function_structure(scan:::export.sc_plm, label="plm export", fname="export")
```

```{r warning=FALSE}
res <- plm(exampleA1B1A2B2$Pawel)
export(res)
```

## Hierarchical piecewise regressions

```{r results='asis', echo=FALSE}
function_structure(scan:::export.sc_hplm, label="hplm export", fname="export")
```

```{r warning=FALSE}
exampleAB_50 %>%
  add_l2(exampleAB_50.l2) %>%
  hplm(lr.test = TRUE, random.slopes = TRUE) %>%
  export()
```

## Power analyses

```{r results='asis', echo=FALSE}
function_structure(scan:::export.sc_power, label="power_test export", fname="export")
```

```{r warning=FALSE}
design <- design(
  n = 1, phase_design = list(A = 6, B = 9),
  rtt = 0.8, level = 1.4, trend = 0.05
)
set.seed(124)
power_test(design, n_sim = 10) |> export()
```